#region shared types
public enum UnderscoreNamedEnum
{
    [EnumMember(Value = "an_enum_value_1")] AnEnumValue1,
    [EnumMember(Value = "an_enum_value_2")] AnEnumValue2
}

#endregion

#nullable enable
#region directives
public class SkipDirective : GraphQlDirective
{
    public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
    {
        AddArgument("if", @if);
    }
}

public class IncludeDirective : GraphQlDirective
{
    public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
    {
        AddArgument("if", @if);
    }
}

#endregion

#region builder classes
public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "simpleObject", IsComplex = true, QueryBuilderType = typeof(SimpleObjectTypeQueryBuilder) },
            new FieldMetadata { Name = "union", IsComplex = true, QueryBuilderType = typeof(UnionTypeQueryBuilder) },
            new FieldMetadata { Name = "interface", IsComplex = true, QueryBuilderType = typeof(NamedTypeQueryBuilder) },
            new FieldMetadata { Name = "underscore_named_field", IsComplex = true, QueryBuilderType = typeof(UnderscoreNamedClassQueryBuilder) }
        };

    protected override string Prefix { get; } = "query";

    protected override string TypeName { get; } = "Query";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public QueryQueryBuilder(string? alias = null) : base(alias, null)
    {
    }

    public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public QueryQueryBuilder WithSimpleObject(SimpleObjectTypeQueryBuilder simpleObjectTypeQueryBuilder) => WithObjectField("simpleObject", simpleObjectTypeQueryBuilder);

    public QueryQueryBuilder ExceptSimpleObject() => ExceptField("simpleObject");

    public QueryQueryBuilder WithUnion(UnionTypeQueryBuilder unionTypeQueryBuilder) => WithObjectField("union", unionTypeQueryBuilder);

    public QueryQueryBuilder ExceptUnion() => ExceptField("union");

    public QueryQueryBuilder WithInterface(NamedTypeQueryBuilder namedTypeQueryBuilder, QueryBuilderParameter<Guid> parameter)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "parameter", ArgumentValue = parameter} );
        return WithObjectField("interface", namedTypeQueryBuilder, args);
    }

    public QueryQueryBuilder ExceptInterface() => ExceptField("interface");

    public QueryQueryBuilder WithUnderscoreNamedField(UnderscoreNamedClassQueryBuilder underscoreNamedClassQueryBuilder, QueryBuilderParameter<UnderscoreNamedInput> underscoreNamedParameter)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "underscore_named_parameter", ArgumentValue = underscoreNamedParameter} );
        return WithObjectField("underscore_named_field", underscoreNamedClassQueryBuilder, args);
    }

    public QueryQueryBuilder ExceptUnderscoreNamedField() => ExceptField("underscore_named_field");
}

public partial class SimpleObjectTypeQueryBuilder : GraphQlQueryBuilder<SimpleObjectTypeQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "stringValueNullable" },
            new FieldMetadata { Name = "stringValue" },
            new FieldMetadata { Name = "stringArrayValue", IsComplex = true }
        };

    protected override string TypeName { get; } = "SimpleObjectType";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SimpleObjectTypeQueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public SimpleObjectTypeQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include });

    public SimpleObjectTypeQueryBuilder ExceptId() => ExceptField("id");

    public SimpleObjectTypeQueryBuilder WithStringValueNullable(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("stringValueNullable", alias, new GraphQlDirective?[] { skip, include });

    public SimpleObjectTypeQueryBuilder ExceptStringValueNullable() => ExceptField("stringValueNullable");

    public SimpleObjectTypeQueryBuilder WithStringValue(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("stringValue", alias, new GraphQlDirective?[] { skip, include });

    public SimpleObjectTypeQueryBuilder ExceptStringValue() => ExceptField("stringValue");

    public SimpleObjectTypeQueryBuilder WithStringArrayValue(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("stringArrayValue", alias, new GraphQlDirective?[] { skip, include });

    public SimpleObjectTypeQueryBuilder ExceptStringArrayValue() => ExceptField("stringArrayValue");
}

public partial class UnionTypeQueryBuilder : GraphQlQueryBuilder<UnionTypeQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

    protected override string TypeName { get; } = "UnionType";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public UnionTypeQueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public UnionTypeQueryBuilder WithConcreteType1Fragment(ConcreteType1QueryBuilder concreteType1QueryBuilder) => WithFragment(concreteType1QueryBuilder);

    public UnionTypeQueryBuilder WithConcreteType2Fragment(ConcreteType2QueryBuilder concreteType2QueryBuilder) => WithFragment(concreteType2QueryBuilder);

    public UnionTypeQueryBuilder WithConcreteType3Fragment(ConcreteType3QueryBuilder concreteType3QueryBuilder) => WithFragment(concreteType3QueryBuilder);
}

public partial class ConcreteType1QueryBuilder : GraphQlQueryBuilder<ConcreteType1QueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "concreteType1Field" }
        };

    protected override string TypeName { get; } = "ConcreteType1";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConcreteType1QueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public ConcreteType1QueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

    public ConcreteType1QueryBuilder ExceptName() => ExceptField("name");

    public ConcreteType1QueryBuilder WithConcreteType1Field(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("concreteType1Field", alias, new GraphQlDirective?[] { skip, include });

    public ConcreteType1QueryBuilder ExceptConcreteType1Field() => ExceptField("concreteType1Field");
}

public partial class NamedTypeQueryBuilder : GraphQlQueryBuilder<NamedTypeQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" }
        };

    protected override string TypeName { get; } = "NamedType";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public NamedTypeQueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public NamedTypeQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

    public NamedTypeQueryBuilder ExceptName() => ExceptField("name");

    public NamedTypeQueryBuilder WithConcreteType1Fragment(ConcreteType1QueryBuilder concreteType1QueryBuilder) => WithFragment(concreteType1QueryBuilder);

    public NamedTypeQueryBuilder WithConcreteType2Fragment(ConcreteType2QueryBuilder concreteType2QueryBuilder) => WithFragment(concreteType2QueryBuilder);

    public NamedTypeQueryBuilder WithConcreteType3Fragment(ConcreteType3QueryBuilder concreteType3QueryBuilder) => WithFragment(concreteType3QueryBuilder);
}

public partial class ConcreteType2QueryBuilder : GraphQlQueryBuilder<ConcreteType2QueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "concreteType2Field" }
        };

    protected override string TypeName { get; } = "ConcreteType2";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConcreteType2QueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public ConcreteType2QueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

    public ConcreteType2QueryBuilder ExceptName() => ExceptField("name");

    public ConcreteType2QueryBuilder WithConcreteType2Field(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("concreteType2Field", alias, new GraphQlDirective?[] { skip, include });

    public ConcreteType2QueryBuilder ExceptConcreteType2Field() => ExceptField("concreteType2Field");
}

public partial class ConcreteType3QueryBuilder : GraphQlQueryBuilder<ConcreteType3QueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "concreteType3Field" },
            new FieldMetadata { Name = "function" }
        };

    protected override string TypeName { get; } = "ConcreteType3";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConcreteType3QueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public ConcreteType3QueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

    public ConcreteType3QueryBuilder ExceptName() => ExceptField("name");

    public ConcreteType3QueryBuilder WithConcreteType3Field(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("concreteType3Field", alias, new GraphQlDirective?[] { skip, include });

    public ConcreteType3QueryBuilder ExceptConcreteType3Field() => ExceptField("concreteType3Field");

    public ConcreteType3QueryBuilder WithFunction(QueryBuilderParameter<string> value, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "value", ArgumentValue = value} );
        return WithScalarField("function", alias, new GraphQlDirective?[] { skip, include }, args);
    }

    public ConcreteType3QueryBuilder ExceptFunction() => ExceptField("function");
}

public partial class UnderscoreNamedClassQueryBuilder : GraphQlQueryBuilder<UnderscoreNamedClassQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "underscore_named_field_enum" },
            new FieldMetadata { Name = "underscore_named_field_enum_collection", IsComplex = true }
        };

    protected override string TypeName { get; } = "underscore_named_class";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public UnderscoreNamedClassQueryBuilder(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) : base(alias, new GraphQlDirective?[] { skip, include })
    {
    }

    public UnderscoreNamedClassQueryBuilder WithUnderscoreNamedFieldEnum(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("underscore_named_field_enum", alias, new GraphQlDirective?[] { skip, include });

    public UnderscoreNamedClassQueryBuilder ExceptUnderscoreNamedFieldEnum() => ExceptField("underscore_named_field_enum");

    public UnderscoreNamedClassQueryBuilder WithUnderscoreNamedFieldEnumCollection(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("underscore_named_field_enum_collection", alias, new GraphQlDirective?[] { skip, include });

    public UnderscoreNamedClassQueryBuilder ExceptUnderscoreNamedFieldEnumCollection() => ExceptField("underscore_named_field_enum_collection");
}
#endregion
#nullable restore

#nullable enable
#region input classes
public partial class UnderscoreNamedInput : IGraphQlInputObject
{
    private InputPropertyInfo _underscoreNamedFieldEnum;
    private InputPropertyInfo _underscoreNamedFieldEnumCollection;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonProperty("underscore_named_field_enum")]
    #endif
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<UnderscoreNamedEnum?>))]
    #endif
    public QueryBuilderParameter<UnderscoreNamedEnum?>? UnderscoreNamedFieldEnum
    {
        get => (QueryBuilderParameter<UnderscoreNamedEnum?>?)_underscoreNamedFieldEnum.Value;
        set => _underscoreNamedFieldEnum = new InputPropertyInfo { Name = "underscore_named_field_enum", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonProperty("underscore_named_field_enum_collection")]
    #endif
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UnderscoreNamedEnum>?>))]
    #endif
    public QueryBuilderParameter<ICollection<UnderscoreNamedEnum>?>? UnderscoreNamedFieldEnumCollection
    {
        get => (QueryBuilderParameter<ICollection<UnderscoreNamedEnum>?>?)_underscoreNamedFieldEnumCollection.Value;
        set => _underscoreNamedFieldEnumCollection = new InputPropertyInfo { Name = "underscore_named_field_enum_collection", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_underscoreNamedFieldEnum.Name != null) yield return _underscoreNamedFieldEnum;
        if (_underscoreNamedFieldEnumCollection.Name != null) yield return _underscoreNamedFieldEnumCollection;
    }
}
#endregion

#region data classes
public partial class Query
{
    public SimpleObjectType? SimpleObject { get; set; }
    public ICollection<UnionType>? Union { get; set; }
    public ICollection<NamedType>? Interface { get; set; }
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonProperty("underscore_named_field")]
    #endif
    public UnderscoreNamedClass? UnderscoreNamedField { get; set; }
}

public partial class SimpleObjectType
{
    public Guid? Id { get; set; }
    public string? StringValueNullable { get; set; }
    public string? StringValue { get; set; }
    public ICollection<string>? StringArrayValue { get; set; }
}

public partial class UnionType
{
    public string? Name { get; set; }
    public string? ConcreteType1Field { get; set; }
    public string? ConcreteType2Field { get; set; }
    public string? ConcreteType3Field { get; set; }
    public string? Function { get; set; }
}

public partial class ConcreteType1 : INamedType
{
    public string? Name { get; set; }
    public string? ConcreteType1Field { get; set; }
}

public interface INamedType
{
    string? Name { get; set; }
}

public partial class NamedType : INamedType
{
    public string? Name { get; set; }
}

public partial class ConcreteType2 : INamedType
{
    public string? Name { get; set; }
    public string? ConcreteType2Field { get; set; }
}

public partial class ConcreteType3 : INamedType
{
    public string? Name { get; set; }
    public string? ConcreteType3Field { get; set; }
    public string? Function { get; set; }
}

public partial class UnderscoreNamedClass
{
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonProperty("underscore_named_field_enum")]
    #endif
    public UnderscoreNamedEnum? UnderscoreNamedFieldEnum { get; set; }
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonProperty("underscore_named_field_enum_collection")]
    #endif
    public ICollection<UnderscoreNamedEnum>? UnderscoreNamedFieldEnumCollection { get; set; }
}
#endregion
#nullable restore