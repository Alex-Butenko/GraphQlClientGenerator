#region base classes
public class FieldMetadata
{
    public string Name { get; set; }
    public bool IsComplex { get; set; }
    public Type QueryBuilderType { get; set; }
}

public enum Formatting
{
    None,
    Indented
}

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
public class QueryBuilderParameterConverter<T> : JsonConverter
{
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        switch (reader.TokenType)
        {
            case JsonToken.Null:
                return null;

            default:
                return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
        }
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        if (value == null)
            writer.WriteNull();
        else
            serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
    }

    public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
}
#endif

internal static class GraphQlQueryHelper
{
    private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);

    public static string GetIndentation(int level, byte indentationSize)
    {
        return new String(' ', level * indentationSize);
    }

    public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
    {
        if (value is null)
            return "null";

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        if (value is JValue jValue)
        {
            switch (jValue.Type)
            {
                case JTokenType.Null: return "null";
                case JTokenType.Integer:
                case JTokenType.Float:
                case JTokenType.Boolean:
                    return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                default:
                    return "\"" + jValue.Value + "\"";
            }
        }

        if (value is JProperty jProperty)
        {
            if (RegexWhiteSpace.IsMatch(jProperty.Name))
                throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");

            return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
        }

        if (value is JObject jObject)
            return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
#endif

        var enumerable = value as IEnumerable;
        if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
            return
                value is IFormattable formattable
                    ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                    : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));

        if (value is Enum @enum)
            return ConvertEnumToString(@enum);

        if (value is bool @bool)
            return @bool ? "true" : "false";

        if (value is DateTime dateTime)
            return "\"" + dateTime.ToString("O") + "\"";

        if (value is DateTimeOffset dateTimeOffset)
            return "\"" + dateTimeOffset.ToString("O") + "\"";

        if (value is IGraphQlInputObject inputObject)
            return BuildInputObject(inputObject, formatting, level + 2, indentationSize);

        if (value is String || value is Guid)
            return "\"" + value + "\"";

        if (enumerable != null)
            return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');

        if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
            return Convert.ToString(value, CultureInfo.InvariantCulture);

        var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
        return "\"" + argumentValue + "\"";
    }

    private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
    {
        var builder = new StringBuilder();
        builder.Append(openingSymbol);
        var delimiter = String.Empty;
        foreach (var item in enumerable)
        {
            builder.Append(delimiter);

            if (formatting == Formatting.Indented)
            {
                builder.AppendLine();
                builder.Append(GetIndentation(level + 1, indentationSize));
            }

            builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
            delimiter = ",";
        }

        builder.Append(closingSymbol);
        return builder.ToString();
    }

    public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
    {
        var builder = new StringBuilder();
        builder.Append("{");

        var isIndentedFormatting = formatting == Formatting.Indented;
        string valueSeparator;
        if (isIndentedFormatting)
        {
            builder.AppendLine();
            valueSeparator = ": ";
        }
        else
            valueSeparator = ":";

        var separator = String.Empty;
        foreach (var propertyValue in inputObject.GetPropertyValues())
        {
            var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
            var value =
                queryBuilderParameter?.Name != null
                    ? "$" + queryBuilderParameter.Name
                    : BuildArgumentValue(queryBuilderParameter?.Value ?? propertyValue.Value, propertyValue.FormatMask, formatting, level, indentationSize);

            builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
            builder.Append(propertyValue.Name);
            builder.Append(valueSeparator);
            builder.Append(value);

            separator = ",";

            if (isIndentedFormatting)
                builder.AppendLine();
        }

        if (isIndentedFormatting)
            builder.Append(GetIndentation(level - 1, indentationSize));

        builder.Append("}");

        return builder.ToString();
    }

    public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
    {
        if (directive == null)
            return String.Empty;

        var isIndentedFormatting = formatting == Formatting.Indented;
        var indentationSpace = isIndentedFormatting ? " " : String.Empty;
        var builder = new StringBuilder();
        builder.Append(indentationSpace);
        builder.Append("@");
        builder.Append(directive.Name);
        builder.Append("(");

        string separator = null;
        foreach (var kvp in directive.Arguments)
        {
            var argumentName = kvp.Key;
            var argument = kvp.Value;

            builder.Append(separator);
            builder.Append(argumentName);
            builder.Append(":");
            builder.Append(indentationSpace);

            if (argument.Name == null)
                builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
            else
            {
                builder.Append("$");
                builder.Append(argument.Name);
            }

            separator = isIndentedFormatting ? ", " : ",";
        }

        builder.Append(")");
        return builder.ToString();
    }

    public static void ValidateGraphQlIdentifier(string name, string identifier)
    {
        if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
            throw new ArgumentException("Value must match [_A-Za-z][_0-9A-Za-z]*. ", name);
    }

    private static string ConvertEnumToString(Enum @enum)
    {
        var enumMember = @enum.GetType().GetTypeInfo().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");

        var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

        return enumMemberAttribute == null
            ? @enum.ToString()
            : enumMemberAttribute.Value;
    }
}

internal struct InputPropertyInfo
{
    public string Name { get; set; }
    public object Value { get; set; }
    public string FormatMask { get; set; }
}

internal interface IGraphQlInputObject
{
    IEnumerable<InputPropertyInfo> GetPropertyValues();
}

public interface IGraphQlQueryBuilder
{
    void Clear();
    void IncludeAllFields();
    string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
}

public struct QueryBuilderArgumentInfo
{
    public string ArgumentName { get; set; }
    public QueryBuilderParameter ArgumentValue { get; set; }
    public string FormatMask { get; set; }
}

public abstract class QueryBuilderParameter
{
    private string _name;

    internal string GraphQlTypeName { get; }
    internal object Value { get; set; }

    public string Name
    {
        get => _name;
        set
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
            _name = value;
        }
    }

    protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
    {
        Name = name?.Trim();
        GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
        Value = value;
    }

    protected QueryBuilderParameter(object value) => Value = value;
}

public class QueryBuilderParameter<T> : QueryBuilderParameter
{
    public new T Value
    {
        get => (T)base.Value;
        set => base.Value = value;
    }

    protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
    {
    }

    private QueryBuilderParameter(T value) : base(value)
    {
    }

    public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);

    public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
}

public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
{
    private string _formatMask;

    public string FormatMask
    {
        get => _formatMask;
        set => _formatMask =
            typeof(IFormattable).GetTypeInfo().IsAssignableFrom(typeof(T))
                ? value
                : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
    }

    public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
    {
    }
}

public abstract class GraphQlDirective
{
    private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();

    internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;

    public string Name { get; }

    protected GraphQlDirective(string name)
    {
        GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
        Name = name;
    }

    protected void AddArgument(string name, QueryBuilderParameter value)
    {
        if (value != null)
            _arguments[name] = value;
    }
}

public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
{
    private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

    private readonly GraphQlDirective[] _directives;

    private Dictionary<string, GraphQlFragmentCriteria> _fragments;
    private List<QueryBuilderArgumentInfo> _queryParameters;

    protected virtual string Prefix { get { return null; } }

    protected abstract string TypeName { get; }

    protected abstract IList<FieldMetadata> AllFields { get; }

    public string Alias { get; }

    protected GraphQlQueryBuilder(string alias, params GraphQlDirective[] directives)
    {
        GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
        Alias = alias;
        _directives = directives;
    }

    public virtual void Clear()
    {
        _fieldCriteria.Clear();
        _fragments?.Clear();
        _queryParameters?.Clear();
    }

    void IGraphQlQueryBuilder.IncludeAllFields()
    {
        IncludeAllFields();
    }

    public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
    {
        return Build(formatting, 1, indentationSize);
    }

    protected void IncludeAllFields()
    {
        IncludeFields(AllFields);
    }

    protected virtual string Build(Formatting formatting, int level, byte indentationSize)
    {
        var isIndentedFormatting = formatting == Formatting.Indented;
        var separator = String.Empty;
        var indentationSpace = isIndentedFormatting ? " " : String.Empty;
        var builder = new StringBuilder();

        if (!String.IsNullOrEmpty(Prefix))
        {
            builder.Append(Prefix);

            if (!String.IsNullOrEmpty(Alias))
            {
                builder.Append(" ");
                builder.Append(Alias);
            }

            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");

                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                    }
                    else
                        builder.Append(separator);
                    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);

                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);

                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                    }

                    separator = ",";
                }

                builder.Append(")");
            }
        }

        if (_directives != null)
            foreach (var directive in _directives.Where(d => d != null))
                builder.Append(GraphQlQueryHelper.BuildDirective(directive, formatting, level, indentationSize));

        builder.Append(indentationSpace);
        builder.Append("{");

        if (isIndentedFormatting)
            builder.AppendLine();

        separator = String.Empty;
        
        foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
        {
            var fieldCriteria = criteria.Build(formatting, level, indentationSize);
            if (isIndentedFormatting)
                builder.AppendLine(fieldCriteria);
            else if (!String.IsNullOrEmpty(fieldCriteria))
            {
                builder.Append(separator);
                builder.Append(fieldCriteria);
            }

            separator = ",";
        }

        if (isIndentedFormatting)
            builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
        
        builder.Append("}");

        return builder.ToString();
    }

    protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
    {
        GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
        _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
    }

    protected void IncludeObjectField(string fieldName, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args)
    {
        _fieldCriteria[objectFieldQueryBuilder.Alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, objectFieldQueryBuilder, args);
    }

    protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder)
    {
        _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
        _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder);
    }

    protected void ExcludeField(string fieldName)
    {
        if (fieldName == null)
            throw new ArgumentNullException(nameof(fieldName));

        _fieldCriteria.Remove(fieldName);
    }

    protected void IncludeFields(IEnumerable<FieldMetadata> fields)
    {
        IncludeFields(fields, null);
    }

    private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
    {
        foreach (var field in fields)
        {
            if (field.QueryBuilderType == null)
                IncludeScalarField(field.Name, null, null, null);
            else
            {
                var builderType = GetType();

                if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                    continue;

                parentTypes?.Add(builderType);

                var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);

                var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);

                foreach (var includeFragmentMethod in includeFragmentMethods)
                    includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });

                IncludeObjectField(field.Name, queryBuilder, null);
            }
        }
    }

    private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
    {
        var constructorInfo = queryBuilderType.GetConstructors().SingleOrDefault(IsCompatibleConstructor);
        if (constructorInfo == null)
            throw new InvalidOperationException($"{queryBuilderType.FullName} constructor not found");

        var queryBuilder = (GraphQlQueryBuilder)constructorInfo.Invoke(new object[constructorInfo.GetParameters().Length]);
        queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
        return queryBuilder;
    }

    private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
    {
        if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
            return false;

        var parameters = methodInfo.GetParameters();
        return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
    }

    private static bool IsCompatibleConstructor(ConstructorInfo constructorInfo)
    {
        var parameters = constructorInfo.GetParameters();
        if (parameters.Length == 0 || parameters[0].ParameterType != typeof(String))
            return false;

        return parameters.Skip(1).All(p => p.ParameterType.IsSubclassOf(typeof(GraphQlDirective)));
    }

    protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
    {
        if (_queryParameters == null)
            _queryParameters = new List<QueryBuilderArgumentInfo>();
        
        _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
    }

    private abstract class GraphQlFieldCriteria
    {
        private readonly IList<QueryBuilderArgumentInfo> _args;

        protected readonly string FieldName;

        protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
            formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;

        protected GraphQlFieldCriteria(string fieldName, IList<QueryBuilderArgumentInfo> args)
        {
            FieldName = fieldName;
            _args = args;
        }

        public abstract string Build(Formatting formatting, int level, byte indentationSize);

        protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
        {
            var separator = formatting == Formatting.Indented ? " " : null;
            var argumentCount = _args?.Count ?? 0;
            if (argumentCount == 0)
                return String.Empty;

            var arguments =
                _args.Select(
                    a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");

            return $"({String.Join($",{separator}", arguments)})";
        }

        protected static string BuildAliasPrefix(string alias, Formatting formatting)
        {
            var separator = formatting == Formatting.Indented ? " " : String.Empty;
            return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
        }
    }

    private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
    {
        private readonly string _alias;
        private readonly GraphQlDirective[] _directives;

        public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives) : base(fieldName, args)
        {
            _alias = alias;
            _directives = directives;
        }

        public override string Build(Formatting formatting, int level, byte indentationSize) =>
            GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(_alias, formatting) + FieldName + BuildArgumentClause(formatting, level, indentationSize) +
            (_directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize))));
    }

    private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
    {
        private readonly GraphQlQueryBuilder _objectQueryBuilder;

        public GraphQlObjectFieldCriteria(string fieldName, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args) : base(fieldName, args)
        {
            _objectQueryBuilder = objectQueryBuilder;
        }

        public override string Build(Formatting formatting, int level, byte indentationSize) =>
            _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(_objectQueryBuilder.Alias, formatting) + FieldName +
                  BuildArgumentClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                : null;
    }

    private class GraphQlFragmentCriteria : GraphQlFieldCriteria
    {
        private readonly GraphQlQueryBuilder _objectQueryBuilder;

        public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder) : base(objectQueryBuilder.TypeName, null)
        {
            _objectQueryBuilder = objectQueryBuilder;
        }

        public override string Build(Formatting formatting, int level, byte indentationSize) =>
            _objectQueryBuilder._fieldCriteria.Count == 0
                ? null
                : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                  FieldName + BuildArgumentClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
    }
}

public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
{
    protected GraphQlQueryBuilder(string alias, GraphQlDirective[] directives)
        : base(alias, directives)
    {
    }

    public TQueryBuilder WithAllFields()
    {
        IncludeAllFields();
        return (TQueryBuilder)this;
    }

    public TQueryBuilder WithAllScalarFields()
    {
        IncludeFields(AllFields.Where(f => !f.IsComplex));
        return (TQueryBuilder)this;
    }

    public TQueryBuilder ExceptField(string fieldName)
    {
        ExcludeField(fieldName);
        return (TQueryBuilder)this;
    }

    public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
    {
        IncludeScalarField("__typename", alias, null, directives);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
    {
        IncludeScalarField(fieldName, alias, args, directives);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithObjectField(string fieldName, GraphQlQueryBuilder queryBuilder, IList<QueryBuilderArgumentInfo> args = null)
    {
        IncludeObjectField(fieldName, queryBuilder, args);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder)
    {
        IncludeFragment(queryBuilder);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
    {
        AddParameter(parameter);
        return (TQueryBuilder)this;
    }
}
#endregion

#region shared types
public enum Avatar
{
    [EnumMember(Value="floorhouse1")] Floorhouse1,
    [EnumMember(Value="floorhouse2")] Floorhouse2,
    [EnumMember(Value="floorhouse3")] Floorhouse3,
    [EnumMember(Value="castle")] Castle,
    [EnumMember(Value="apartment")] Apartment,
    [EnumMember(Value="cottage")] Cottage,
    [EnumMember(Value="rowhouse")] Rowhouse
}

public enum Resolution
{
    [EnumMember(Value="annual")] Annual,
    [EnumMember(Value="monthly")] Monthly
}

#endregion

#region directives
public class IncludeDirective : GraphQlDirective
{
    public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
    {
        AddArgument("if", @if);
    }
}

public class SkipDirective : GraphQlDirective
{
    public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
    {
        AddArgument("if", @if);
    }
}

#endregion

#region builder classes
internal partial class QueryQueryBuilderV1 : GraphQlQueryBuilder<QueryQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(MeQueryBuilderV1) }
        };

    protected override string Prefix { get; } = "query";

    protected override string TypeName { get; } = "Query";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public QueryQueryBuilderV1(string alias = null) : base(alias, null)
    {
    }

    public QueryQueryBuilderV1 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public QueryQueryBuilderV1 WithMe(MeQueryBuilderV1 meQueryBuilder) => WithObjectField("me", meQueryBuilder);

    public QueryQueryBuilderV1 ExceptMe() => ExceptField("me");
}

internal partial class MeQueryBuilderV1 : GraphQlQueryBuilder<MeQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "firstName" },
            new FieldMetadata { Name = "lastName" },
            new FieldMetadata { Name = "fullName" },
            new FieldMetadata { Name = "ssn" },
            new FieldMetadata { Name = "email" },
            new FieldMetadata { Name = "language" },
            new FieldMetadata { Name = "tone" },
            new FieldMetadata { Name = "mobile" },
            new FieldMetadata { Name = "welcomeGreeting", IsComplex = true, QueryBuilderType = typeof(GreetingQueryBuilderV1) },
            new FieldMetadata { Name = "appState", IsComplex = true, QueryBuilderType = typeof(AppStateQueryBuilderV1) },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilderV1) },
            new FieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilderV1) },
            new FieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedQueryBuilderV1) },
            new FieldMetadata { Name = "wallet", IsComplex = true, QueryBuilderType = typeof(WalletQueryBuilderV1) },
            new FieldMetadata { Name = "about", IsComplex = true, QueryBuilderType = typeof(AboutQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Me";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public MeQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public MeQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptId() => ExceptField("id");

    public MeQueryBuilderV1 WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptFirstName() => ExceptField("firstName");

    public MeQueryBuilderV1 WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptLastName() => ExceptField("lastName");

    public MeQueryBuilderV1 WithFullName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullName", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptFullName() => ExceptField("fullName");

    public MeQueryBuilderV1 WithSsn(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("ssn", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptSsn() => ExceptField("ssn");

    public MeQueryBuilderV1 WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("email", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptEmail() => ExceptField("email");

    public MeQueryBuilderV1 WithLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("language", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptLanguage() => ExceptField("language");

    public MeQueryBuilderV1 WithTone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("tone", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptTone() => ExceptField("tone");

    public MeQueryBuilderV1 WithMobile(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("mobile", alias, new GraphQlDirective[] { include, skip });

    public MeQueryBuilderV1 ExceptMobile() => ExceptField("mobile");

    public MeQueryBuilderV1 WithWelcomeGreeting(GreetingQueryBuilderV1 greetingQueryBuilder) => WithObjectField("welcomeGreeting", greetingQueryBuilder);

    public MeQueryBuilderV1 ExceptWelcomeGreeting() => ExceptField("welcomeGreeting");

    public MeQueryBuilderV1 WithAppState(AppStateQueryBuilderV1 appStateQueryBuilder) => WithObjectField("appState", appStateQueryBuilder);

    public MeQueryBuilderV1 ExceptAppState() => ExceptField("appState");

    public MeQueryBuilderV1 WithHome(HomeQueryBuilderV1 homeQueryBuilder, QueryBuilderParameter<string> id = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (id != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

        return WithObjectField("home", homeQueryBuilder, args);
    }

    public MeQueryBuilderV1 ExceptHome()
    {
        return ExceptField("home");
    }

    public MeQueryBuilderV1 WithHomes(HomeQueryBuilderV1 homeQueryBuilder) => WithObjectField("homes", homeQueryBuilder);

    public MeQueryBuilderV1 ExceptHomes() => ExceptField("homes");

    public MeQueryBuilderV1 WithFeed(FeedQueryBuilderV1 feedQueryBuilder) => WithObjectField("feed", feedQueryBuilder);

    public MeQueryBuilderV1 ExceptFeed() => ExceptField("feed");

    public MeQueryBuilderV1 WithWallet(WalletQueryBuilderV1 walletQueryBuilder) => WithObjectField("wallet", walletQueryBuilder);

    public MeQueryBuilderV1 ExceptWallet() => ExceptField("wallet");

    public MeQueryBuilderV1 WithAbout(AboutQueryBuilderV1 aboutQueryBuilder) => WithObjectField("about", aboutQueryBuilder);

    public MeQueryBuilderV1 ExceptAbout() => ExceptField("about");
}

internal partial class GreetingQueryBuilderV1 : GraphQlQueryBuilder<GreetingQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "descriptionWhenNoEnergyDeal" },
            new FieldMetadata { Name = "showUntil" }
        };

    protected override string TypeName { get; } = "Greeting";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public GreetingQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public GreetingQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public GreetingQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public GreetingQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public GreetingQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public GreetingQueryBuilderV1 WithDescriptionWhenNoEnergyDeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("descriptionWhenNoEnergyDeal", alias, new GraphQlDirective[] { include, skip });

    public GreetingQueryBuilderV1 ExceptDescriptionWhenNoEnergyDeal() => ExceptField("descriptionWhenNoEnergyDeal");

    public GreetingQueryBuilderV1 WithShowUntil(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("showUntil", alias, new GraphQlDirective[] { include, skip });

    public GreetingQueryBuilderV1 ExceptShowUntil() => ExceptField("showUntil");
}

internal partial class AppStateQueryBuilderV1 : GraphQlQueryBuilder<AppStateQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "journey", IsComplex = true, QueryBuilderType = typeof(AppStateJourneyQueryBuilderV1) },
            new FieldMetadata { Name = "frontScreens", IsComplex = true, QueryBuilderType = typeof(AppStateFronScreenQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "AppState";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AppStateQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AppStateQueryBuilderV1 WithJourney(AppStateJourneyQueryBuilderV1 appStateJourneyQueryBuilder) => WithObjectField("journey", appStateJourneyQueryBuilder);

    public AppStateQueryBuilderV1 ExceptJourney() => ExceptField("journey");

    public AppStateQueryBuilderV1 WithFrontScreens(AppStateFronScreenQueryBuilderV1 appStateFronScreenQueryBuilder) => WithObjectField("frontScreens", appStateFronScreenQueryBuilder);

    public AppStateQueryBuilderV1 ExceptFrontScreens() => ExceptField("frontScreens");
}

internal partial class AppStateJourneyQueryBuilderV1 : GraphQlQueryBuilder<AppStateJourneyQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "hasVisitedPairDevices" }
        };

    protected override string TypeName { get; } = "AppStateJourney";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AppStateJourneyQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AppStateJourneyQueryBuilderV1 WithHasVisitedPairDevices(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasVisitedPairDevices", alias, new GraphQlDirective[] { include, skip });

    public AppStateJourneyQueryBuilderV1 ExceptHasVisitedPairDevices() => ExceptField("hasVisitedPairDevices");
}

internal partial class AppStateFronScreenQueryBuilderV1 : GraphQlQueryBuilder<AppStateFronScreenQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "homeId" },
            new FieldMetadata { Name = "bubbles", IsComplex = true },
            new FieldMetadata { Name = "bubblesSortOrder", IsComplex = true }
        };

    protected override string TypeName { get; } = "AppStateFronScreen";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AppStateFronScreenQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AppStateFronScreenQueryBuilderV1 WithHomeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeId", alias, new GraphQlDirective[] { include, skip });

    public AppStateFronScreenQueryBuilderV1 ExceptHomeId() => ExceptField("homeId");

    public AppStateFronScreenQueryBuilderV1 WithBubbles(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bubbles", alias, new GraphQlDirective[] { include, skip });

    public AppStateFronScreenQueryBuilderV1 ExceptBubbles() => ExceptField("bubbles");

    public AppStateFronScreenQueryBuilderV1 WithBubblesSortOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bubblesSortOrder", alias, new GraphQlDirective[] { include, skip });

    public AppStateFronScreenQueryBuilderV1 ExceptBubblesSortOrder() => ExceptField("bubblesSortOrder");
}

internal partial class HomeQueryBuilderV1 : GraphQlQueryBuilder<HomeQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "avatar" },
            new FieldMetadata { Name = "timeZone" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "hasEnergyDeal" },
            new FieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilderV1) },
            new FieldMetadata { Name = "subscription", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilderV1) },
            new FieldMetadata { Name = "consumptionMonths", IsComplex = true, QueryBuilderType = typeof(ConsumptionMonthQueryBuilderV1) },
            new FieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilderV1) },
            new FieldMetadata { Name = "preLiveComparison", IsComplex = true, QueryBuilderType = typeof(PreLiveComparisonQueryBuilderV1) },
            new FieldMetadata { Name = "comparisons", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilderV1) },
            new FieldMetadata { Name = "comparisonCurrentMonth", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilderV1) },
            new FieldMetadata { Name = "profileQuestions", IsComplex = true, QueryBuilderType = typeof(HomeProfileQuestionQueryBuilderV1) },
            new FieldMetadata { Name = "temperatures", IsComplex = true },
            new FieldMetadata { Name = "signupStatus", IsComplex = true, QueryBuilderType = typeof(SignupStatusQueryBuilderV1) },
            new FieldMetadata { Name = "disaggregation", IsComplex = true, QueryBuilderType = typeof(DisaggregationQueryBuilderV1) },
            new FieldMetadata { Name = "weather", IsComplex = true, QueryBuilderType = typeof(WeatherQueryBuilderV1) },
            new FieldMetadata { Name = "awayMode", IsComplex = true, QueryBuilderType = typeof(AwayModeQueryBuilderV1) },
            new FieldMetadata { Name = "dayNightSchedule", IsComplex = true, QueryBuilderType = typeof(DayNightScheduleQueryBuilderV1) },
            new FieldMetadata { Name = "report", IsComplex = true, QueryBuilderType = typeof(ReportRootQueryBuilderV1) },
            new FieldMetadata { Name = "thermostats", IsComplex = true, QueryBuilderType = typeof(ThermostatQueryBuilderV1) },
            new FieldMetadata { Name = "sensors", IsComplex = true, QueryBuilderType = typeof(SensorQueryBuilderV1) },
            new FieldMetadata { Name = "sensorsHistory", IsComplex = true, QueryBuilderType = typeof(SensorHistoryQueryBuilderV1) },
            new FieldMetadata { Name = "pairableDevices", IsComplex = true, QueryBuilderType = typeof(PairableDeviceQueryBuilderV1) },
            new FieldMetadata { Name = "productionMonths", IsComplex = true, QueryBuilderType = typeof(ProductionMonthQueryBuilderV1) },
            new FieldMetadata { Name = "production", IsComplex = true, QueryBuilderType = typeof(ProductionQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Home";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public HomeQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public HomeQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public HomeQueryBuilderV1 ExceptId() => ExceptField("id");

    public HomeQueryBuilderV1 WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });

    public HomeQueryBuilderV1 ExceptAvatar() => ExceptField("avatar");

    public HomeQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public HomeQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");

    public HomeQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public HomeQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public HomeQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public HomeQueryBuilderV1 ExceptType() => ExceptField("type");

    public HomeQueryBuilderV1 WithHasEnergyDeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasEnergyDeal", alias, new GraphQlDirective[] { include, skip });

    public HomeQueryBuilderV1 ExceptHasEnergyDeal() => ExceptField("hasEnergyDeal");

    public HomeQueryBuilderV1 WithAddress(AddressQueryBuilderV1 addressQueryBuilder) => WithObjectField("address", addressQueryBuilder);

    public HomeQueryBuilderV1 ExceptAddress() => ExceptField("address");

    public HomeQueryBuilderV1 WithSubscription(SubscriptionQueryBuilderV1 subscriptionQueryBuilder) => WithObjectField("subscription", subscriptionQueryBuilder);

    public HomeQueryBuilderV1 ExceptSubscription() => ExceptField("subscription");

    public HomeQueryBuilderV1 WithConsumptionMonths(ConsumptionMonthQueryBuilderV1 consumptionMonthQueryBuilder, QueryBuilderParameter<bool?> useDemoData = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("consumptionMonths", consumptionMonthQueryBuilder, args);
    }

    public HomeQueryBuilderV1 ExceptConsumptionMonths()
    {
        return ExceptField("consumptionMonths");
    }

    public HomeQueryBuilderV1 WithConsumption(ConsumptionQueryBuilderV1 consumptionQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<bool?> useDemoData = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("consumption", consumptionQueryBuilder, args);
    }

    public HomeQueryBuilderV1 ExceptConsumption()
    {
        return ExceptField("consumption");
    }

    public HomeQueryBuilderV1 WithPreLiveComparison(PreLiveComparisonQueryBuilderV1 preLiveComparisonQueryBuilder) => WithObjectField("preLiveComparison", preLiveComparisonQueryBuilder);

    public HomeQueryBuilderV1 ExceptPreLiveComparison() => ExceptField("preLiveComparison");

    public HomeQueryBuilderV1 WithComparisons(ComparisonQueryBuilderV1 comparisonQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<Resolution?> resolution = null, QueryBuilderParameter<bool?> useDemoData = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("comparisons", comparisonQueryBuilder, args);
    }

    public HomeQueryBuilderV1 ExceptComparisons()
    {
        return ExceptField("comparisons");
    }

    public HomeQueryBuilderV1 WithComparisonCurrentMonth(ComparisonQueryBuilderV1 comparisonQueryBuilder) => WithObjectField("comparisonCurrentMonth", comparisonQueryBuilder);

    public HomeQueryBuilderV1 ExceptComparisonCurrentMonth() => ExceptField("comparisonCurrentMonth");

    public HomeQueryBuilderV1 WithProfileQuestions(HomeProfileQuestionQueryBuilderV1 homeProfileQuestionQueryBuilder) => WithObjectField("profileQuestions", homeProfileQuestionQueryBuilder);

    public HomeQueryBuilderV1 ExceptProfileQuestions() => ExceptField("profileQuestions");

    public HomeQueryBuilderV1 WithTemperatures(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<string> resolution = null, QueryBuilderParameter<bool?> useDemoData = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithScalarField("temperatures", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public HomeQueryBuilderV1 ExceptTemperatures()
    {
        return ExceptField("temperatures");
    }

    public HomeQueryBuilderV1 WithSignupStatus(SignupStatusQueryBuilderV1 signupStatusQueryBuilder) => WithObjectField("signupStatus", signupStatusQueryBuilder);

    public HomeQueryBuilderV1 ExceptSignupStatus() => ExceptField("signupStatus");

    public HomeQueryBuilderV1 WithDisaggregation(DisaggregationQueryBuilderV1 disaggregationQueryBuilder, QueryBuilderParameter<Resolution?> resolution = null, QueryBuilderParameter<bool?> useDemoData = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("disaggregation", disaggregationQueryBuilder, args);
    }

    public HomeQueryBuilderV1 ExceptDisaggregation()
    {
        return ExceptField("disaggregation");
    }

    public HomeQueryBuilderV1 WithWeather(WeatherQueryBuilderV1 weatherQueryBuilder) => WithObjectField("weather", weatherQueryBuilder);

    public HomeQueryBuilderV1 ExceptWeather() => ExceptField("weather");

    public HomeQueryBuilderV1 WithAwayMode(AwayModeQueryBuilderV1 awayModeQueryBuilder) => WithObjectField("awayMode", awayModeQueryBuilder);

    public HomeQueryBuilderV1 ExceptAwayMode() => ExceptField("awayMode");

    public HomeQueryBuilderV1 WithDayNightSchedule(DayNightScheduleQueryBuilderV1 dayNightScheduleQueryBuilder) => WithObjectField("dayNightSchedule", dayNightScheduleQueryBuilder);

    public HomeQueryBuilderV1 ExceptDayNightSchedule() => ExceptField("dayNightSchedule");

    public HomeQueryBuilderV1 WithReport(ReportRootQueryBuilderV1 reportRootQueryBuilder) => WithObjectField("report", reportRootQueryBuilder);

    public HomeQueryBuilderV1 ExceptReport() => ExceptField("report");

    public HomeQueryBuilderV1 WithThermostats(ThermostatQueryBuilderV1 thermostatQueryBuilder) => WithObjectField("thermostats", thermostatQueryBuilder);

    public HomeQueryBuilderV1 ExceptThermostats() => ExceptField("thermostats");

    public HomeQueryBuilderV1 WithSensors(SensorQueryBuilderV1 sensorQueryBuilder) => WithObjectField("sensors", sensorQueryBuilder);

    public HomeQueryBuilderV1 ExceptSensors() => ExceptField("sensors");

    public HomeQueryBuilderV1 WithSensorsHistory(SensorHistoryQueryBuilderV1 sensorHistoryQueryBuilder) => WithObjectField("sensorsHistory", sensorHistoryQueryBuilder);

    public HomeQueryBuilderV1 ExceptSensorsHistory() => ExceptField("sensorsHistory");

    public HomeQueryBuilderV1 WithPairableDevices(PairableDeviceQueryBuilderV1 pairableDeviceQueryBuilder) => WithObjectField("pairableDevices", pairableDeviceQueryBuilder);

    public HomeQueryBuilderV1 ExceptPairableDevices() => ExceptField("pairableDevices");

    public HomeQueryBuilderV1 WithProductionMonths(ProductionMonthQueryBuilderV1 productionMonthQueryBuilder) => WithObjectField("productionMonths", productionMonthQueryBuilder);

    public HomeQueryBuilderV1 ExceptProductionMonths() => ExceptField("productionMonths");

    public HomeQueryBuilderV1 WithProduction(ProductionQueryBuilderV1 productionQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        return WithObjectField("production", productionQueryBuilder, args);
    }

    public HomeQueryBuilderV1 ExceptProduction()
    {
        return ExceptField("production");
    }
}

internal partial class AddressQueryBuilderV1 : GraphQlQueryBuilder<AddressQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "address1" },
            new FieldMetadata { Name = "address2" },
            new FieldMetadata { Name = "address3" },
            new FieldMetadata { Name = "city" },
            new FieldMetadata { Name = "postalCode" },
            new FieldMetadata { Name = "country" },
            new FieldMetadata { Name = "latitude" },
            new FieldMetadata { Name = "longitude" },
            new FieldMetadata { Name = "elevation" },
            new FieldMetadata { Name = "addressText" }
        };

    protected override string TypeName { get; } = "Address";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AddressQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AddressQueryBuilderV1 WithAddress1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("address1", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptAddress1() => ExceptField("address1");

    public AddressQueryBuilderV1 WithAddress2(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("address2", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptAddress2() => ExceptField("address2");

    public AddressQueryBuilderV1 WithAddress3(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("address3", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptAddress3() => ExceptField("address3");

    public AddressQueryBuilderV1 WithCity(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("city", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptCity() => ExceptField("city");

    public AddressQueryBuilderV1 WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptPostalCode() => ExceptField("postalCode");

    public AddressQueryBuilderV1 WithCountry(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("country", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptCountry() => ExceptField("country");

    public AddressQueryBuilderV1 WithLatitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("latitude", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptLatitude() => ExceptField("latitude");

    public AddressQueryBuilderV1 WithLongitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("longitude", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptLongitude() => ExceptField("longitude");

    public AddressQueryBuilderV1 WithElevation(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("elevation", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptElevation() => ExceptField("elevation");

    public AddressQueryBuilderV1 WithAddressText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("addressText", alias, new GraphQlDirective[] { include, skip });

    public AddressQueryBuilderV1 ExceptAddressText() => ExceptField("addressText");
}

internal partial class SubscriptionQueryBuilderV1 : GraphQlQueryBuilder<SubscriptionQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "walletId" },
            new FieldMetadata { Name = "validFrom" },
            new FieldMetadata { Name = "validTo" },
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "billingRegionId" },
            new FieldMetadata { Name = "priceRating", IsComplex = true, QueryBuilderType = typeof(PriceRatingRootQueryBuilderV1) },
            new FieldMetadata { Name = "invoices", IsComplex = true, QueryBuilderType = typeof(InvoiceQueryBuilderV1) },
            new FieldMetadata { Name = "energyDeal", IsComplex = true, QueryBuilderType = typeof(EnergyDealQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Subscription";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SubscriptionQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public SubscriptionQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public SubscriptionQueryBuilderV1 ExceptId() => ExceptField("id");

    public SubscriptionQueryBuilderV1 WithWalletId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("walletId", alias, new GraphQlDirective[] { include, skip });

    public SubscriptionQueryBuilderV1 ExceptWalletId() => ExceptField("walletId");

    public SubscriptionQueryBuilderV1 WithValidFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("validFrom", alias, new GraphQlDirective[] { include, skip });

    public SubscriptionQueryBuilderV1 ExceptValidFrom() => ExceptField("validFrom");

    public SubscriptionQueryBuilderV1 WithValidTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("validTo", alias, new GraphQlDirective[] { include, skip });

    public SubscriptionQueryBuilderV1 ExceptValidTo() => ExceptField("validTo");

    public SubscriptionQueryBuilderV1 WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("status", alias, new GraphQlDirective[] { include, skip });

    public SubscriptionQueryBuilderV1 ExceptStatus() => ExceptField("status");

    public SubscriptionQueryBuilderV1 WithBillingRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("billingRegionId", alias, new GraphQlDirective[] { include, skip });

    public SubscriptionQueryBuilderV1 ExceptBillingRegionId() => ExceptField("billingRegionId");

    public SubscriptionQueryBuilderV1 WithPriceRating(PriceRatingRootQueryBuilderV1 priceRatingRootQueryBuilder) => WithObjectField("priceRating", priceRatingRootQueryBuilder);

    public SubscriptionQueryBuilderV1 ExceptPriceRating() => ExceptField("priceRating");

    public SubscriptionQueryBuilderV1 WithInvoices(InvoiceQueryBuilderV1 invoiceQueryBuilder) => WithObjectField("invoices", invoiceQueryBuilder);

    public SubscriptionQueryBuilderV1 ExceptInvoices() => ExceptField("invoices");

    public SubscriptionQueryBuilderV1 WithEnergyDeal(EnergyDealQueryBuilderV1 energyDealQueryBuilder) => WithObjectField("energyDeal", energyDealQueryBuilder);

    public SubscriptionQueryBuilderV1 ExceptEnergyDeal() => ExceptField("energyDeal");
}

internal partial class PriceRatingRootQueryBuilderV1 : GraphQlQueryBuilder<PriceRatingRootQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "isAvailable" },
            new FieldMetadata { Name = "useTotalIsConfigurable" },
            new FieldMetadata { Name = "useTotalAsDefault" },
            new FieldMetadata { Name = "useTotalText" },
            new FieldMetadata { Name = "hourly", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilderV1) },
            new FieldMetadata { Name = "daily", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilderV1) },
            new FieldMetadata { Name = "monthly", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "PriceRatingRoot";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PriceRatingRootQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PriceRatingRootQueryBuilderV1 WithIsAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isAvailable", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingRootQueryBuilderV1 ExceptIsAvailable() => ExceptField("isAvailable");

    public PriceRatingRootQueryBuilderV1 WithUseTotalIsConfigurable(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("useTotalIsConfigurable", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingRootQueryBuilderV1 ExceptUseTotalIsConfigurable() => ExceptField("useTotalIsConfigurable");

    public PriceRatingRootQueryBuilderV1 WithUseTotalAsDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("useTotalAsDefault", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingRootQueryBuilderV1 ExceptUseTotalAsDefault() => ExceptField("useTotalAsDefault");

    public PriceRatingRootQueryBuilderV1 WithUseTotalText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("useTotalText", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingRootQueryBuilderV1 ExceptUseTotalText() => ExceptField("useTotalText");

    public PriceRatingRootQueryBuilderV1 WithHourly(PriceRatingQueryBuilderV1 priceRatingQueryBuilder) => WithObjectField("hourly", priceRatingQueryBuilder);

    public PriceRatingRootQueryBuilderV1 ExceptHourly() => ExceptField("hourly");

    public PriceRatingRootQueryBuilderV1 WithDaily(PriceRatingQueryBuilderV1 priceRatingQueryBuilder) => WithObjectField("daily", priceRatingQueryBuilder);

    public PriceRatingRootQueryBuilderV1 ExceptDaily() => ExceptField("daily");

    public PriceRatingRootQueryBuilderV1 WithMonthly(PriceRatingQueryBuilderV1 priceRatingQueryBuilder) => WithObjectField("monthly", priceRatingQueryBuilder);

    public PriceRatingRootQueryBuilderV1 ExceptMonthly() => ExceptField("monthly");
}

internal partial class PriceRatingQueryBuilderV1 : GraphQlQueryBuilder<PriceRatingQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "minEnergy" },
            new FieldMetadata { Name = "maxEnergy" },
            new FieldMetadata { Name = "minTotal" },
            new FieldMetadata { Name = "maxTotal" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "colorOffsets", IsComplex = true, QueryBuilderType = typeof(PriceRatingColorOffsetQueryBuilderV1) },
            new FieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(PriceRatingEntryQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "PriceRating";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PriceRatingQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PriceRatingQueryBuilderV1 WithMinEnergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minEnergy", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingQueryBuilderV1 ExceptMinEnergy() => ExceptField("minEnergy");

    public PriceRatingQueryBuilderV1 WithMaxEnergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maxEnergy", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingQueryBuilderV1 ExceptMaxEnergy() => ExceptField("maxEnergy");

    public PriceRatingQueryBuilderV1 WithMinTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minTotal", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingQueryBuilderV1 ExceptMinTotal() => ExceptField("minTotal");

    public PriceRatingQueryBuilderV1 WithMaxTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maxTotal", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingQueryBuilderV1 ExceptMaxTotal() => ExceptField("maxTotal");

    public PriceRatingQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public PriceRatingQueryBuilderV1 WithColorOffsets(PriceRatingColorOffsetQueryBuilderV1 priceRatingColorOffsetQueryBuilder) => WithObjectField("colorOffsets", priceRatingColorOffsetQueryBuilder);

    public PriceRatingQueryBuilderV1 ExceptColorOffsets() => ExceptField("colorOffsets");

    public PriceRatingQueryBuilderV1 WithEntries(PriceRatingEntryQueryBuilderV1 priceRatingEntryQueryBuilder) => WithObjectField("entries", priceRatingEntryQueryBuilder);

    public PriceRatingQueryBuilderV1 ExceptEntries() => ExceptField("entries");
}

internal partial class PriceRatingColorOffsetQueryBuilderV1 : GraphQlQueryBuilder<PriceRatingColorOffsetQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "fullGreenPercent" },
            new FieldMetadata { Name = "fullYellowPercent" },
            new FieldMetadata { Name = "fullRedPercent" }
        };

    protected override string TypeName { get; } = "PriceRatingColorOffset";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PriceRatingColorOffsetQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PriceRatingColorOffsetQueryBuilderV1 WithFullGreenPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullGreenPercent", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingColorOffsetQueryBuilderV1 ExceptFullGreenPercent() => ExceptField("fullGreenPercent");

    public PriceRatingColorOffsetQueryBuilderV1 WithFullYellowPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullYellowPercent", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingColorOffsetQueryBuilderV1 ExceptFullYellowPercent() => ExceptField("fullYellowPercent");

    public PriceRatingColorOffsetQueryBuilderV1 WithFullRedPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullRedPercent", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingColorOffsetQueryBuilderV1 ExceptFullRedPercent() => ExceptField("fullRedPercent");
}

internal partial class PriceRatingEntryQueryBuilderV1 : GraphQlQueryBuilder<PriceRatingEntryQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "time" },
            new FieldMetadata { Name = "energy" },
            new FieldMetadata { Name = "total" },
            new FieldMetadata { Name = "difference" }
        };

    protected override string TypeName { get; } = "PriceRatingEntry";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PriceRatingEntryQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PriceRatingEntryQueryBuilderV1 WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("time", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingEntryQueryBuilderV1 ExceptTime() => ExceptField("time");

    public PriceRatingEntryQueryBuilderV1 WithEnergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("energy", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingEntryQueryBuilderV1 ExceptEnergy() => ExceptField("energy");

    public PriceRatingEntryQueryBuilderV1 WithTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("total", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingEntryQueryBuilderV1 ExceptTotal() => ExceptField("total");

    public PriceRatingEntryQueryBuilderV1 WithDifference(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("difference", alias, new GraphQlDirective[] { include, skip });

    public PriceRatingEntryQueryBuilderV1 ExceptDifference() => ExceptField("difference");
}

internal partial class InvoiceQueryBuilderV1 : GraphQlQueryBuilder<InvoiceQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "no" },
            new FieldMetadata { Name = "date" },
            new FieldMetadata { Name = "dueDate" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "totalCostLocalized" },
            new FieldMetadata { Name = "totalEnergyConsumption" },
            new FieldMetadata { Name = "totalEnergyConsumptionLocalized" },
            new FieldMetadata { Name = "totalVat" },
            new FieldMetadata { Name = "totalVatLocalized" },
            new FieldMetadata { Name = "vatPercent" },
            new FieldMetadata { Name = "vatPercentLocalized" },
            new FieldMetadata { Name = "vatIsIncluded" },
            new FieldMetadata { Name = "meteringPointId" },
            new FieldMetadata { Name = "paymentReference" },
            new FieldMetadata { Name = "showManualPaymentReferences" },
            new FieldMetadata { Name = "bankAccount" },
            new FieldMetadata { Name = "pdfUrl" },
            new FieldMetadata { Name = "timeZone" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "payment", IsComplex = true, QueryBuilderType = typeof(InvoicePaymentQueryBuilderV1) },
            new FieldMetadata { Name = "sections", IsComplex = true, QueryBuilderType = typeof(InvoiceSectionQueryBuilderV1) },
            new FieldMetadata { Name = "from" },
            new FieldMetadata { Name = "to" }
        };

    protected override string TypeName { get; } = "Invoice";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public InvoiceQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public InvoiceQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptId() => ExceptField("id");

    public InvoiceQueryBuilderV1 WithNo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("no", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptNo() => ExceptField("no");

    public InvoiceQueryBuilderV1 WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("date", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptDate() => ExceptField("date");

    public InvoiceQueryBuilderV1 WithDueDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("dueDate", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptDueDate() => ExceptField("dueDate");

    public InvoiceQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public InvoiceQueryBuilderV1 WithTotalCostLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCostLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTotalCostLocalized() => ExceptField("totalCostLocalized");

    public InvoiceQueryBuilderV1 WithTotalEnergyConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalEnergyConsumption", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTotalEnergyConsumption() => ExceptField("totalEnergyConsumption");

    public InvoiceQueryBuilderV1 WithTotalEnergyConsumptionLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalEnergyConsumptionLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTotalEnergyConsumptionLocalized() => ExceptField("totalEnergyConsumptionLocalized");

    public InvoiceQueryBuilderV1 WithTotalVat(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalVat", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTotalVat() => ExceptField("totalVat");

    public InvoiceQueryBuilderV1 WithTotalVatLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalVatLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTotalVatLocalized() => ExceptField("totalVatLocalized");

    public InvoiceQueryBuilderV1 WithVatPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("vatPercent", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptVatPercent() => ExceptField("vatPercent");

    public InvoiceQueryBuilderV1 WithVatPercentLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("vatPercentLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptVatPercentLocalized() => ExceptField("vatPercentLocalized");

    public InvoiceQueryBuilderV1 WithVatIsIncluded(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("vatIsIncluded", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptVatIsIncluded() => ExceptField("vatIsIncluded");

    public InvoiceQueryBuilderV1 WithMeteringPointId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("meteringPointId", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptMeteringPointId() => ExceptField("meteringPointId");

    public InvoiceQueryBuilderV1 WithPaymentReference(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("paymentReference", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptPaymentReference() => ExceptField("paymentReference");

    public InvoiceQueryBuilderV1 WithShowManualPaymentReferences(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("showManualPaymentReferences", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptShowManualPaymentReferences() => ExceptField("showManualPaymentReferences");

    public InvoiceQueryBuilderV1 WithBankAccount(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bankAccount", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptBankAccount() => ExceptField("bankAccount");

    public InvoiceQueryBuilderV1 WithPdfUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("pdfUrl", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptPdfUrl() => ExceptField("pdfUrl");

    public InvoiceQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");

    public InvoiceQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public InvoiceQueryBuilderV1 WithPayment(InvoicePaymentQueryBuilderV1 invoicePaymentQueryBuilder) => WithObjectField("payment", invoicePaymentQueryBuilder);

    public InvoiceQueryBuilderV1 ExceptPayment() => ExceptField("payment");

    public InvoiceQueryBuilderV1 WithSections(InvoiceSectionQueryBuilderV1 invoiceSectionQueryBuilder) => WithObjectField("sections", invoiceSectionQueryBuilder);

    public InvoiceQueryBuilderV1 ExceptSections() => ExceptField("sections");

    public InvoiceQueryBuilderV1 WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("from", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptFrom() => ExceptField("from");

    public InvoiceQueryBuilderV1 WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("to", alias, new GraphQlDirective[] { include, skip });

    public InvoiceQueryBuilderV1 ExceptTo() => ExceptField("to");
}

internal partial class InvoicePaymentQueryBuilderV1 : GraphQlQueryBuilder<InvoicePaymentQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "method" },
            new FieldMetadata { Name = "date" },
            new FieldMetadata { Name = "failureText" },
            new FieldMetadata { Name = "creditCard", IsComplex = true, QueryBuilderType = typeof(CreditCardQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "InvoicePayment";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public InvoicePaymentQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public InvoicePaymentQueryBuilderV1 WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("status", alias, new GraphQlDirective[] { include, skip });

    public InvoicePaymentQueryBuilderV1 ExceptStatus() => ExceptField("status");

    public InvoicePaymentQueryBuilderV1 WithMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("method", alias, new GraphQlDirective[] { include, skip });

    public InvoicePaymentQueryBuilderV1 ExceptMethod() => ExceptField("method");

    public InvoicePaymentQueryBuilderV1 WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("date", alias, new GraphQlDirective[] { include, skip });

    public InvoicePaymentQueryBuilderV1 ExceptDate() => ExceptField("date");

    public InvoicePaymentQueryBuilderV1 WithFailureText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("failureText", alias, new GraphQlDirective[] { include, skip });

    public InvoicePaymentQueryBuilderV1 ExceptFailureText() => ExceptField("failureText");

    public InvoicePaymentQueryBuilderV1 WithCreditCard(CreditCardQueryBuilderV1 creditCardQueryBuilder) => WithObjectField("creditCard", creditCardQueryBuilder);

    public InvoicePaymentQueryBuilderV1 ExceptCreditCard() => ExceptField("creditCard");
}

internal partial class CreditCardQueryBuilderV1 : GraphQlQueryBuilder<CreditCardQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "brand" },
            new FieldMetadata { Name = "last4" }
        };

    protected override string TypeName { get; } = "CreditCard";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public CreditCardQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public CreditCardQueryBuilderV1 WithBrand(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("brand", alias, new GraphQlDirective[] { include, skip });

    public CreditCardQueryBuilderV1 ExceptBrand() => ExceptField("brand");

    public CreditCardQueryBuilderV1 WithLast4(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("last4", alias, new GraphQlDirective[] { include, skip });

    public CreditCardQueryBuilderV1 ExceptLast4() => ExceptField("last4");
}

internal partial class InvoiceSectionQueryBuilderV1 : GraphQlQueryBuilder<InvoiceSectionQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "text" },
            new FieldMetadata { Name = "subText" },
            new FieldMetadata { Name = "consumption" },
            new FieldMetadata { Name = "consumptionLocalized" },
            new FieldMetadata { Name = "consumptionUnit" },
            new FieldMetadata { Name = "price" },
            new FieldMetadata { Name = "priceLocalized" },
            new FieldMetadata { Name = "priceUnit" },
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "costLocalized" },
            new FieldMetadata { Name = "costUnit" }
        };

    protected override string TypeName { get; } = "InvoiceSection";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public InvoiceSectionQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public InvoiceSectionQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptType() => ExceptField("type");

    public InvoiceSectionQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptText() => ExceptField("text");

    public InvoiceSectionQueryBuilderV1 WithSubText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("subText", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptSubText() => ExceptField("subText");

    public InvoiceSectionQueryBuilderV1 WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");

    public InvoiceSectionQueryBuilderV1 WithConsumptionLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptConsumptionLocalized() => ExceptField("consumptionLocalized");

    public InvoiceSectionQueryBuilderV1 WithConsumptionUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionUnit", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptConsumptionUnit() => ExceptField("consumptionUnit");

    public InvoiceSectionQueryBuilderV1 WithPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("price", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptPrice() => ExceptField("price");

    public InvoiceSectionQueryBuilderV1 WithPriceLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("priceLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptPriceLocalized() => ExceptField("priceLocalized");

    public InvoiceSectionQueryBuilderV1 WithPriceUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("priceUnit", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptPriceUnit() => ExceptField("priceUnit");

    public InvoiceSectionQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public InvoiceSectionQueryBuilderV1 WithCostLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costLocalized", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptCostLocalized() => ExceptField("costLocalized");

    public InvoiceSectionQueryBuilderV1 WithCostUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costUnit", alias, new GraphQlDirective[] { include, skip });

    public InvoiceSectionQueryBuilderV1 ExceptCostUnit() => ExceptField("costUnit");
}

internal partial class EnergyDealQueryBuilderV1 : GraphQlQueryBuilder<EnergyDealQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "currentProducer", IsComplex = true, QueryBuilderType = typeof(ProducerQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "EnergyDeal";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public EnergyDealQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public EnergyDealQueryBuilderV1 WithCurrentProducer(ProducerQueryBuilderV1 producerQueryBuilder) => WithObjectField("currentProducer", producerQueryBuilder);

    public EnergyDealQueryBuilderV1 ExceptCurrentProducer() => ExceptField("currentProducer");
}

internal partial class ProducerQueryBuilderV1 : GraphQlQueryBuilder<ProducerQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "imageSrc" },
            new FieldMetadata { Name = "bullets", IsComplex = true, QueryBuilderType = typeof(ProducerBulletQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Producer";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ProducerQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ProducerQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public ProducerQueryBuilderV1 ExceptId() => ExceptField("id");

    public ProducerQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public ProducerQueryBuilderV1 ExceptName() => ExceptField("name");

    public ProducerQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public ProducerQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public ProducerQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public ProducerQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public ProducerQueryBuilderV1 WithImageSrc(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("imageSrc", alias, new GraphQlDirective[] { include, skip });

    public ProducerQueryBuilderV1 ExceptImageSrc() => ExceptField("imageSrc");

    public ProducerQueryBuilderV1 WithBullets(ProducerBulletQueryBuilderV1 producerBulletQueryBuilder) => WithObjectField("bullets", producerBulletQueryBuilder);

    public ProducerQueryBuilderV1 ExceptBullets() => ExceptField("bullets");
}

internal partial class ProducerBulletQueryBuilderV1 : GraphQlQueryBuilder<ProducerBulletQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "readMoreUrl" }
        };

    protected override string TypeName { get; } = "ProducerBullet";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ProducerBulletQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ProducerBulletQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public ProducerBulletQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public ProducerBulletQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public ProducerBulletQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public ProducerBulletQueryBuilderV1 WithReadMoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("readMoreUrl", alias, new GraphQlDirective[] { include, skip });

    public ProducerBulletQueryBuilderV1 ExceptReadMoreUrl() => ExceptField("readMoreUrl");
}

internal partial class ConsumptionMonthQueryBuilderV1 : GraphQlQueryBuilder<ConsumptionMonthQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "kwh" },
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "kwhEstimate" },
            new FieldMetadata { Name = "costEstimate" },
            new FieldMetadata { Name = "currency" }
        };

    protected override string TypeName { get; } = "ConsumptionMonth";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConsumptionMonthQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ConsumptionMonthQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptYear() => ExceptField("year");

    public ConsumptionMonthQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public ConsumptionMonthQueryBuilderV1 WithKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwh", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptKwh() => ExceptField("kwh");

    public ConsumptionMonthQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public ConsumptionMonthQueryBuilderV1 WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptIsComplete() => ExceptField("isComplete");

    public ConsumptionMonthQueryBuilderV1 WithKwhEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwhEstimate", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptKwhEstimate() => ExceptField("kwhEstimate");

    public ConsumptionMonthQueryBuilderV1 WithCostEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costEstimate", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptCostEstimate() => ExceptField("costEstimate");

    public ConsumptionMonthQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionMonthQueryBuilderV1 ExceptCurrency() => ExceptField("currency");
}

internal partial class ConsumptionQueryBuilderV1 : GraphQlQueryBuilder<ConsumptionQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "annualValues", IsComplex = true },
            new FieldMetadata { Name = "monthlyValues", IsComplex = true },
            new FieldMetadata { Name = "weeklyValues", IsComplex = true },
            new FieldMetadata { Name = "dailyValues", IsComplex = true },
            new FieldMetadata { Name = "hourlyValues", IsComplex = true },
            new FieldMetadata { Name = "totalConsumption" },
            new FieldMetadata { Name = "energyCost" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "latestTransactionTimestamp" },
            new FieldMetadata { Name = "timeZone" }
        };

    protected override string TypeName { get; } = "Consumption";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConsumptionQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ConsumptionQueryBuilderV1 WithAnnualValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("annualValues", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptAnnualValues() => ExceptField("annualValues");

    public ConsumptionQueryBuilderV1 WithMonthlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("monthlyValues", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptMonthlyValues() => ExceptField("monthlyValues");

    public ConsumptionQueryBuilderV1 WithWeeklyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("weeklyValues", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptWeeklyValues() => ExceptField("weeklyValues");

    public ConsumptionQueryBuilderV1 WithDailyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("dailyValues", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptDailyValues() => ExceptField("dailyValues");

    public ConsumptionQueryBuilderV1 WithHourlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hourlyValues", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptHourlyValues() => ExceptField("hourlyValues");

    public ConsumptionQueryBuilderV1 WithTotalConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalConsumption", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptTotalConsumption() => ExceptField("totalConsumption");

    public ConsumptionQueryBuilderV1 WithEnergyCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("energyCost", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptEnergyCost() => ExceptField("energyCost");

    public ConsumptionQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public ConsumptionQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public ConsumptionQueryBuilderV1 WithLatestTransactionTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("latestTransactionTimestamp", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptLatestTransactionTimestamp() => ExceptField("latestTransactionTimestamp");

    public ConsumptionQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public ConsumptionQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");
}

internal partial class PreLiveComparisonQueryBuilderV1 : GraphQlQueryBuilder<PreLiveComparisonQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "homeId" },
            new FieldMetadata { Name = "basedOnActuals" },
            new FieldMetadata { Name = "previousYear", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilderV1) },
            new FieldMetadata { Name = "previousYearMonths", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "PreLiveComparison";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PreLiveComparisonQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PreLiveComparisonQueryBuilderV1 WithHomeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeId", alias, new GraphQlDirective[] { include, skip });

    public PreLiveComparisonQueryBuilderV1 ExceptHomeId() => ExceptField("homeId");

    public PreLiveComparisonQueryBuilderV1 WithBasedOnActuals(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("basedOnActuals", alias, new GraphQlDirective[] { include, skip });

    public PreLiveComparisonQueryBuilderV1 ExceptBasedOnActuals() => ExceptField("basedOnActuals");

    public PreLiveComparisonQueryBuilderV1 WithPreviousYear(ComparisonQueryBuilderV1 comparisonQueryBuilder) => WithObjectField("previousYear", comparisonQueryBuilder);

    public PreLiveComparisonQueryBuilderV1 ExceptPreviousYear() => ExceptField("previousYear");

    public PreLiveComparisonQueryBuilderV1 WithPreviousYearMonths(ComparisonQueryBuilderV1 comparisonQueryBuilder) => WithObjectField("previousYearMonths", comparisonQueryBuilder);

    public PreLiveComparisonQueryBuilderV1 ExceptPreviousYearMonths() => ExceptField("previousYearMonths");
}

internal partial class ComparisonQueryBuilderV1 : GraphQlQueryBuilder<ComparisonQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "resolution" },
            new FieldMetadata { Name = "homeEfficency" },
            new FieldMetadata { Name = "homeEfficencyDescription" },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilderV1) },
            new FieldMetadata { Name = "average", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilderV1) },
            new FieldMetadata { Name = "efficient", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Comparison";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ComparisonQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ComparisonQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public ComparisonQueryBuilderV1 ExceptYear() => ExceptField("year");

    public ComparisonQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public ComparisonQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public ComparisonQueryBuilderV1 WithResolution(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("resolution", alias, new GraphQlDirective[] { include, skip });

    public ComparisonQueryBuilderV1 ExceptResolution() => ExceptField("resolution");

    public ComparisonQueryBuilderV1 WithHomeEfficency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeEfficency", alias, new GraphQlDirective[] { include, skip });

    public ComparisonQueryBuilderV1 ExceptHomeEfficency() => ExceptField("homeEfficency");

    public ComparisonQueryBuilderV1 WithHomeEfficencyDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeEfficencyDescription", alias, new GraphQlDirective[] { include, skip });

    public ComparisonQueryBuilderV1 ExceptHomeEfficencyDescription() => ExceptField("homeEfficencyDescription");

    public ComparisonQueryBuilderV1 WithHome(ComparisonDataQueryBuilderV1 comparisonDataQueryBuilder) => WithObjectField("home", comparisonDataQueryBuilder);

    public ComparisonQueryBuilderV1 ExceptHome() => ExceptField("home");

    public ComparisonQueryBuilderV1 WithAverage(ComparisonDataQueryBuilderV1 comparisonDataQueryBuilder) => WithObjectField("average", comparisonDataQueryBuilder);

    public ComparisonQueryBuilderV1 ExceptAverage() => ExceptField("average");

    public ComparisonQueryBuilderV1 WithEfficient(ComparisonDataQueryBuilderV1 comparisonDataQueryBuilder) => WithObjectField("efficient", comparisonDataQueryBuilder);

    public ComparisonQueryBuilderV1 ExceptEfficient() => ExceptField("efficient");
}

internal partial class ComparisonDataQueryBuilderV1 : GraphQlQueryBuilder<ComparisonDataQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "consumption" }
        };

    protected override string TypeName { get; } = "ComparisonData";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ComparisonDataQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ComparisonDataQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public ComparisonDataQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public ComparisonDataQueryBuilderV1 WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });

    public ComparisonDataQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");
}

internal partial class HomeProfileQuestionQueryBuilderV1 : GraphQlQueryBuilder<HomeProfileQuestionQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "text" },
            new FieldMetadata { Name = "category" },
            new FieldMetadata { Name = "isAnswered" },
            new FieldMetadata { Name = "propertyName" },
            new FieldMetadata { Name = "valueType" },
            new FieldMetadata { Name = "currentValue", IsComplex = true },
            new FieldMetadata { Name = "currentValueText" },
            new FieldMetadata { Name = "input", IsComplex = true, QueryBuilderType = typeof(HomeProfileQuestionInputQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "HomeProfileQuestion";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public HomeProfileQuestionQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public HomeProfileQuestionQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptId() => ExceptField("id");

    public HomeProfileQuestionQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public HomeProfileQuestionQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptText() => ExceptField("text");

    public HomeProfileQuestionQueryBuilderV1 WithCategory(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("category", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptCategory() => ExceptField("category");

    public HomeProfileQuestionQueryBuilderV1 WithIsAnswered(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isAnswered", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptIsAnswered() => ExceptField("isAnswered");

    public HomeProfileQuestionQueryBuilderV1 WithPropertyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("propertyName", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptPropertyName() => ExceptField("propertyName");

    public HomeProfileQuestionQueryBuilderV1 WithValueType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("valueType", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptValueType() => ExceptField("valueType");

    public HomeProfileQuestionQueryBuilderV1 WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptCurrentValue() => ExceptField("currentValue");

    public HomeProfileQuestionQueryBuilderV1 WithCurrentValueText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currentValueText", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionQueryBuilderV1 ExceptCurrentValueText() => ExceptField("currentValueText");

    public HomeProfileQuestionQueryBuilderV1 WithInput(HomeProfileQuestionInputQueryBuilderV1 homeProfileQuestionInputQueryBuilder) => WithObjectField("input", homeProfileQuestionInputQueryBuilder);

    public HomeProfileQuestionQueryBuilderV1 ExceptInput() => ExceptField("input");
}

internal partial class HomeProfileQuestionInputQueryBuilderV1 : GraphQlQueryBuilder<HomeProfileQuestionInputQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "options", IsComplex = true }
        };

    protected override string TypeName { get; } = "HomeProfileQuestionInput";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public HomeProfileQuestionInputQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public HomeProfileQuestionInputQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionInputQueryBuilderV1 ExceptType() => ExceptField("type");

    public HomeProfileQuestionInputQueryBuilderV1 WithOptions(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("options", alias, new GraphQlDirective[] { include, skip });

    public HomeProfileQuestionInputQueryBuilderV1 ExceptOptions() => ExceptField("options");
}

internal partial class SignupStatusQueryBuilderV1 : GraphQlQueryBuilder<SignupStatusQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "feedStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilderV1) },
            new FieldMetadata { Name = "avatarStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilderV1) },
            new FieldMetadata { Name = "steps", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "SignupStatus";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SignupStatusQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public SignupStatusQueryBuilderV1 WithFeedStep(ProcessStepQueryBuilderV1 processStepQueryBuilder) => WithObjectField("feedStep", processStepQueryBuilder);

    public SignupStatusQueryBuilderV1 ExceptFeedStep() => ExceptField("feedStep");

    public SignupStatusQueryBuilderV1 WithAvatarStep(ProcessStepQueryBuilderV1 processStepQueryBuilder) => WithObjectField("avatarStep", processStepQueryBuilder);

    public SignupStatusQueryBuilderV1 ExceptAvatarStep() => ExceptField("avatarStep");

    public SignupStatusQueryBuilderV1 WithSteps(ProcessStepQueryBuilderV1 processStepQueryBuilder) => WithObjectField("steps", processStepQueryBuilder);

    public SignupStatusQueryBuilderV1 ExceptSteps() => ExceptField("steps");
}

internal partial class ProcessStepQueryBuilderV1 : GraphQlQueryBuilder<ProcessStepQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" }
        };

    protected override string TypeName { get; } = "ProcessStep";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ProcessStepQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ProcessStepQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public ProcessStepQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public ProcessStepQueryBuilderV1 WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });

    public ProcessStepQueryBuilderV1 ExceptIsComplete() => ExceptField("isComplete");

    public ProcessStepQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public ProcessStepQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public ProcessStepQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public ProcessStepQueryBuilderV1 ExceptDescription() => ExceptField("description");
}

internal partial class DisaggregationQueryBuilderV1 : GraphQlQueryBuilder<DisaggregationQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "fixedConsumptionKwh" },
            new FieldMetadata { Name = "fixedConsumptionKwhPercent" },
            new FieldMetadata { Name = "fixedConsumptionCost" },
            new FieldMetadata { Name = "heatingConsumptionKwh" },
            new FieldMetadata { Name = "heatingConsumptionKwhPercent" },
            new FieldMetadata { Name = "heatingConsumptionCost" },
            new FieldMetadata { Name = "behaviorConsumptionKwh" },
            new FieldMetadata { Name = "behaviorConsumptionKwhPercent" },
            new FieldMetadata { Name = "behaviorConsumptionCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "isValid" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "totalConsumptionKwh" }
        };

    protected override string TypeName { get; } = "Disaggregation";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public DisaggregationQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public DisaggregationQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptYear() => ExceptField("year");

    public DisaggregationQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public DisaggregationQueryBuilderV1 WithFixedConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fixedConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptFixedConsumptionKwh() => ExceptField("fixedConsumptionKwh");

    public DisaggregationQueryBuilderV1 WithFixedConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fixedConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptFixedConsumptionKwhPercent() => ExceptField("fixedConsumptionKwhPercent");

    public DisaggregationQueryBuilderV1 WithFixedConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fixedConsumptionCost", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptFixedConsumptionCost() => ExceptField("fixedConsumptionCost");

    public DisaggregationQueryBuilderV1 WithHeatingConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("heatingConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptHeatingConsumptionKwh() => ExceptField("heatingConsumptionKwh");

    public DisaggregationQueryBuilderV1 WithHeatingConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("heatingConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptHeatingConsumptionKwhPercent() => ExceptField("heatingConsumptionKwhPercent");

    public DisaggregationQueryBuilderV1 WithHeatingConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("heatingConsumptionCost", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptHeatingConsumptionCost() => ExceptField("heatingConsumptionCost");

    public DisaggregationQueryBuilderV1 WithBehaviorConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("behaviorConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptBehaviorConsumptionKwh() => ExceptField("behaviorConsumptionKwh");

    public DisaggregationQueryBuilderV1 WithBehaviorConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("behaviorConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptBehaviorConsumptionKwhPercent() => ExceptField("behaviorConsumptionKwhPercent");

    public DisaggregationQueryBuilderV1 WithBehaviorConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("behaviorConsumptionCost", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptBehaviorConsumptionCost() => ExceptField("behaviorConsumptionCost");

    public DisaggregationQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public DisaggregationQueryBuilderV1 WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptIsValid() => ExceptField("isValid");

    public DisaggregationQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public DisaggregationQueryBuilderV1 WithTotalConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public DisaggregationQueryBuilderV1 ExceptTotalConsumptionKwh() => ExceptField("totalConsumptionKwh");
}

internal partial class WeatherQueryBuilderV1 : GraphQlQueryBuilder<WeatherQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "minTemperature" },
            new FieldMetadata { Name = "maxTemperature" },
            new FieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(WeatherEntryQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Weather";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public WeatherQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public WeatherQueryBuilderV1 WithMinTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minTemperature", alias, new GraphQlDirective[] { include, skip });

    public WeatherQueryBuilderV1 ExceptMinTemperature() => ExceptField("minTemperature");

    public WeatherQueryBuilderV1 WithMaxTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maxTemperature", alias, new GraphQlDirective[] { include, skip });

    public WeatherQueryBuilderV1 ExceptMaxTemperature() => ExceptField("maxTemperature");

    public WeatherQueryBuilderV1 WithEntries(WeatherEntryQueryBuilderV1 weatherEntryQueryBuilder) => WithObjectField("entries", weatherEntryQueryBuilder);

    public WeatherQueryBuilderV1 ExceptEntries() => ExceptField("entries");
}

internal partial class WeatherEntryQueryBuilderV1 : GraphQlQueryBuilder<WeatherEntryQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "time" },
            new FieldMetadata { Name = "temperature" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "fog" },
            new FieldMetadata { Name = "precipitation" },
            new FieldMetadata { Name = "cloudiness" },
            new FieldMetadata { Name = "windSpeed" },
            new FieldMetadata { Name = "windGust" }
        };

    protected override string TypeName { get; } = "WeatherEntry";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public WeatherEntryQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public WeatherEntryQueryBuilderV1 WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("time", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptTime() => ExceptField("time");

    public WeatherEntryQueryBuilderV1 WithTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("temperature", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptTemperature() => ExceptField("temperature");

    public WeatherEntryQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptType() => ExceptField("type");

    public WeatherEntryQueryBuilderV1 WithFog(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fog", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptFog() => ExceptField("fog");

    public WeatherEntryQueryBuilderV1 WithPrecipitation(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("precipitation", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptPrecipitation() => ExceptField("precipitation");

    public WeatherEntryQueryBuilderV1 WithCloudiness(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cloudiness", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptCloudiness() => ExceptField("cloudiness");

    public WeatherEntryQueryBuilderV1 WithWindSpeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("windSpeed", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptWindSpeed() => ExceptField("windSpeed");

    public WeatherEntryQueryBuilderV1 WithWindGust(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("windGust", alias, new GraphQlDirective[] { include, skip });

    public WeatherEntryQueryBuilderV1 ExceptWindGust() => ExceptField("windGust");
}

internal partial class AwayModeQueryBuilderV1 : GraphQlQueryBuilder<AwayModeQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "isSupported" },
            new FieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(AwayModeSettingsQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "AwayMode";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AwayModeQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AwayModeQueryBuilderV1 WithIsSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isSupported", alias, new GraphQlDirective[] { include, skip });

    public AwayModeQueryBuilderV1 ExceptIsSupported() => ExceptField("isSupported");

    public AwayModeQueryBuilderV1 WithSettings(AwayModeSettingsQueryBuilderV1 awayModeSettingsQueryBuilder) => WithObjectField("settings", awayModeSettingsQueryBuilder);

    public AwayModeQueryBuilderV1 ExceptSettings() => ExceptField("settings");
}

internal partial class AwayModeSettingsQueryBuilderV1 : GraphQlQueryBuilder<AwayModeSettingsQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "from" },
            new FieldMetadata { Name = "to" }
        };

    protected override string TypeName { get; } = "AwayModeSettings";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AwayModeSettingsQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AwayModeSettingsQueryBuilderV1 WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("from", alias, new GraphQlDirective[] { include, skip });

    public AwayModeSettingsQueryBuilderV1 ExceptFrom() => ExceptField("from");

    public AwayModeSettingsQueryBuilderV1 WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("to", alias, new GraphQlDirective[] { include, skip });

    public AwayModeSettingsQueryBuilderV1 ExceptTo() => ExceptField("to");
}

internal partial class DayNightScheduleQueryBuilderV1 : GraphQlQueryBuilder<DayNightScheduleQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "isSupported" },
            new FieldMetadata { Name = "day", IsComplex = true, QueryBuilderType = typeof(DayNightScheduleSettingsQueryBuilderV1) },
            new FieldMetadata { Name = "night", IsComplex = true, QueryBuilderType = typeof(DayNightScheduleSettingsQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "DayNightSchedule";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public DayNightScheduleQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public DayNightScheduleQueryBuilderV1 WithIsSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isSupported", alias, new GraphQlDirective[] { include, skip });

    public DayNightScheduleQueryBuilderV1 ExceptIsSupported() => ExceptField("isSupported");

    public DayNightScheduleQueryBuilderV1 WithDay(DayNightScheduleSettingsQueryBuilderV1 dayNightScheduleSettingsQueryBuilder) => WithObjectField("day", dayNightScheduleSettingsQueryBuilder);

    public DayNightScheduleQueryBuilderV1 ExceptDay() => ExceptField("day");

    public DayNightScheduleQueryBuilderV1 WithNight(DayNightScheduleSettingsQueryBuilderV1 dayNightScheduleSettingsQueryBuilder) => WithObjectField("night", dayNightScheduleSettingsQueryBuilder);

    public DayNightScheduleQueryBuilderV1 ExceptNight() => ExceptField("night");
}

internal partial class DayNightScheduleSettingsQueryBuilderV1 : GraphQlQueryBuilder<DayNightScheduleSettingsQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "isEnabled" },
            new FieldMetadata { Name = "localTimeFrom" },
            new FieldMetadata { Name = "localTimeTo" },
            new FieldMetadata { Name = "recurringDays", IsComplex = true }
        };

    protected override string TypeName { get; } = "DayNightScheduleSettings";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public DayNightScheduleSettingsQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public DayNightScheduleSettingsQueryBuilderV1 WithIsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isEnabled", alias, new GraphQlDirective[] { include, skip });

    public DayNightScheduleSettingsQueryBuilderV1 ExceptIsEnabled() => ExceptField("isEnabled");

    public DayNightScheduleSettingsQueryBuilderV1 WithLocalTimeFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("localTimeFrom", alias, new GraphQlDirective[] { include, skip });

    public DayNightScheduleSettingsQueryBuilderV1 ExceptLocalTimeFrom() => ExceptField("localTimeFrom");

    public DayNightScheduleSettingsQueryBuilderV1 WithLocalTimeTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("localTimeTo", alias, new GraphQlDirective[] { include, skip });

    public DayNightScheduleSettingsQueryBuilderV1 ExceptLocalTimeTo() => ExceptField("localTimeTo");

    public DayNightScheduleSettingsQueryBuilderV1 WithRecurringDays(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("recurringDays", alias, new GraphQlDirective[] { include, skip });

    public DayNightScheduleSettingsQueryBuilderV1 ExceptRecurringDays() => ExceptField("recurringDays");
}

internal partial class ReportRootQueryBuilderV1 : GraphQlQueryBuilder<ReportRootQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "reports", IsComplex = true, QueryBuilderType = typeof(ReportQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "ReportRoot";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ReportRootQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ReportRootQueryBuilderV1 WithReports(ReportQueryBuilderV1 reportQueryBuilder) => WithObjectField("reports", reportQueryBuilder);

    public ReportRootQueryBuilderV1 ExceptReports() => ExceptField("reports");
}

internal partial class ReportQueryBuilderV1 : GraphQlQueryBuilder<ReportQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "avatar" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "efficiency" },
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(ReportCellQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Report";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ReportQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ReportQueryBuilderV1 WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });

    public ReportQueryBuilderV1 ExceptAvatar() => ExceptField("avatar");

    public ReportQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public ReportQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public ReportQueryBuilderV1 WithEfficiency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("efficiency", alias, new GraphQlDirective[] { include, skip });

    public ReportQueryBuilderV1 ExceptEfficiency() => ExceptField("efficiency");

    public ReportQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public ReportQueryBuilderV1 ExceptYear() => ExceptField("year");

    public ReportQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public ReportQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public ReportQueryBuilderV1 WithItems(ReportCellQueryBuilderV1 reportCellQueryBuilder) => WithObjectField("items", reportCellQueryBuilder);

    public ReportQueryBuilderV1 ExceptItems() => ExceptField("items");
}

internal partial class ReportCellQueryBuilderV1 : GraphQlQueryBuilder<ReportCellQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "style" },
            new FieldMetadata { Name = "imageSrc" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "unitText" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "properties", IsComplex = true }
        };

    protected override string TypeName { get; } = "ReportCell";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ReportCellQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ReportCellQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptType() => ExceptField("type");

    public ReportCellQueryBuilderV1 WithStyle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("style", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptStyle() => ExceptField("style");

    public ReportCellQueryBuilderV1 WithImageSrc(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("imageSrc", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptImageSrc() => ExceptField("imageSrc");

    public ReportCellQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public ReportCellQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public ReportCellQueryBuilderV1 WithUnitText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitText", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptUnitText() => ExceptField("unitText");

    public ReportCellQueryBuilderV1 WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("link", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptLink() => ExceptField("link");

    public ReportCellQueryBuilderV1 WithProperties(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("properties", alias, new GraphQlDirective[] { include, skip });

    public ReportCellQueryBuilderV1 ExceptProperties() => ExceptField("properties");
}

internal partial class ThermostatQueryBuilderV1 : GraphQlQueryBuilder<ThermostatQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "connectivity" },
            new FieldMetadata { Name = "state", IsComplex = true, QueryBuilderType = typeof(ThermostatStateQueryBuilderV1) },
            new FieldMetadata { Name = "measurements", IsComplex = true, QueryBuilderType = typeof(ThermostatMeasurementsQueryBuilderV1) },
            new FieldMetadata { Name = "capabilities", IsComplex = true, QueryBuilderType = typeof(ThermostatCapabilityQueryBuilderV1) },
            new FieldMetadata { Name = "modes", IsComplex = true, QueryBuilderType = typeof(ThermostatModeQueryBuilderV1) },
            new FieldMetadata { Name = "template" },
            new FieldMetadata { Name = "hasSettings" },
            new FieldMetadata { Name = "supportsDayNightSchedule" }
        };

    protected override string TypeName { get; } = "Thermostat";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public ThermostatQueryBuilderV1 ExceptId() => ExceptField("id");

    public ThermostatQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public ThermostatQueryBuilderV1 ExceptName() => ExceptField("name");

    public ThermostatQueryBuilderV1 WithConnectivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("connectivity", alias, new GraphQlDirective[] { include, skip });

    public ThermostatQueryBuilderV1 ExceptConnectivity() => ExceptField("connectivity");

    public ThermostatQueryBuilderV1 WithState(ThermostatStateQueryBuilderV1 thermostatStateQueryBuilder) => WithObjectField("state", thermostatStateQueryBuilder);

    public ThermostatQueryBuilderV1 ExceptState() => ExceptField("state");

    public ThermostatQueryBuilderV1 WithMeasurements(ThermostatMeasurementsQueryBuilderV1 thermostatMeasurementsQueryBuilder) => WithObjectField("measurements", thermostatMeasurementsQueryBuilder);

    public ThermostatQueryBuilderV1 ExceptMeasurements() => ExceptField("measurements");

    public ThermostatQueryBuilderV1 WithCapabilities(ThermostatCapabilityQueryBuilderV1 thermostatCapabilityQueryBuilder) => WithObjectField("capabilities", thermostatCapabilityQueryBuilder);

    public ThermostatQueryBuilderV1 ExceptCapabilities() => ExceptField("capabilities");

    public ThermostatQueryBuilderV1 WithModes(ThermostatModeQueryBuilderV1 thermostatModeQueryBuilder) => WithObjectField("modes", thermostatModeQueryBuilder);

    public ThermostatQueryBuilderV1 ExceptModes() => ExceptField("modes");

    public ThermostatQueryBuilderV1 WithTemplate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("template", alias, new GraphQlDirective[] { include, skip });

    public ThermostatQueryBuilderV1 ExceptTemplate() => ExceptField("template");

    public ThermostatQueryBuilderV1 WithHasSettings(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasSettings", alias, new GraphQlDirective[] { include, skip });

    public ThermostatQueryBuilderV1 ExceptHasSettings() => ExceptField("hasSettings");

    public ThermostatQueryBuilderV1 WithSupportsDayNightSchedule(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("supportsDayNightSchedule", alias, new GraphQlDirective[] { include, skip });

    public ThermostatQueryBuilderV1 ExceptSupportsDayNightSchedule() => ExceptField("supportsDayNightSchedule");
}

internal partial class ThermostatStateQueryBuilderV1 : GraphQlQueryBuilder<ThermostatStateQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "mode" },
            new FieldMetadata { Name = "comfortTemperature" },
            new FieldMetadata { Name = "fanLevel" },
            new FieldMetadata { Name = "onOff" }
        };

    protected override string TypeName { get; } = "ThermostatState";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatStateQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatStateQueryBuilderV1 WithMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("mode", alias, new GraphQlDirective[] { include, skip });

    public ThermostatStateQueryBuilderV1 ExceptMode() => ExceptField("mode");

    public ThermostatStateQueryBuilderV1 WithComfortTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("comfortTemperature", alias, new GraphQlDirective[] { include, skip });

    public ThermostatStateQueryBuilderV1 ExceptComfortTemperature() => ExceptField("comfortTemperature");

    public ThermostatStateQueryBuilderV1 WithFanLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fanLevel", alias, new GraphQlDirective[] { include, skip });

    public ThermostatStateQueryBuilderV1 ExceptFanLevel() => ExceptField("fanLevel");

    public ThermostatStateQueryBuilderV1 WithOnOff(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("onOff", alias, new GraphQlDirective[] { include, skip });

    public ThermostatStateQueryBuilderV1 ExceptOnOff() => ExceptField("onOff");
}

internal partial class ThermostatMeasurementsQueryBuilderV1 : GraphQlQueryBuilder<ThermostatMeasurementsQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "temperature" },
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "display", IsComplex = true, QueryBuilderType = typeof(ThermostatMeasurementQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "ThermostatMeasurements";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatMeasurementsQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatMeasurementsQueryBuilderV1 WithTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("temperature", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementsQueryBuilderV1 ExceptTemperature() => ExceptField("temperature");

    public ThermostatMeasurementsQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementsQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public ThermostatMeasurementsQueryBuilderV1 WithDisplay(ThermostatMeasurementQueryBuilderV1 thermostatMeasurementQueryBuilder) => WithObjectField("display", thermostatMeasurementQueryBuilder);

    public ThermostatMeasurementsQueryBuilderV1 ExceptDisplay() => ExceptField("display");
}

internal partial class ThermostatMeasurementQueryBuilderV1 : GraphQlQueryBuilder<ThermostatMeasurementQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "label" },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "descriptionLong" },
            new FieldMetadata { Name = "value" },
            new FieldMetadata { Name = "valueText" },
            new FieldMetadata { Name = "unit" },
            new FieldMetadata { Name = "unitText" },
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "typeText" }
        };

    protected override string TypeName { get; } = "ThermostatMeasurement";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatMeasurementQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatMeasurementQueryBuilderV1 WithLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("label", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptLabel() => ExceptField("label");

    public ThermostatMeasurementQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public ThermostatMeasurementQueryBuilderV1 WithDescriptionLong(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("descriptionLong", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptDescriptionLong() => ExceptField("descriptionLong");

    public ThermostatMeasurementQueryBuilderV1 WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("value", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptValue() => ExceptField("value");

    public ThermostatMeasurementQueryBuilderV1 WithValueText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("valueText", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptValueText() => ExceptField("valueText");

    public ThermostatMeasurementQueryBuilderV1 WithUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unit", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptUnit() => ExceptField("unit");

    public ThermostatMeasurementQueryBuilderV1 WithUnitText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitText", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptUnitText() => ExceptField("unitText");

    public ThermostatMeasurementQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public ThermostatMeasurementQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptType() => ExceptField("type");

    public ThermostatMeasurementQueryBuilderV1 WithTypeText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("typeText", alias, new GraphQlDirective[] { include, skip });

    public ThermostatMeasurementQueryBuilderV1 ExceptTypeText() => ExceptField("typeText");
}

internal partial class ThermostatCapabilityQueryBuilderV1 : GraphQlQueryBuilder<ThermostatCapabilityQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "values", IsComplex = true }
        };

    protected override string TypeName { get; } = "ThermostatCapability";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatCapabilityQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatCapabilityQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public ThermostatCapabilityQueryBuilderV1 ExceptName() => ExceptField("name");

    public ThermostatCapabilityQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public ThermostatCapabilityQueryBuilderV1 ExceptType() => ExceptField("type");

    public ThermostatCapabilityQueryBuilderV1 WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("values", alias, new GraphQlDirective[] { include, skip });

    public ThermostatCapabilityQueryBuilderV1 ExceptValues() => ExceptField("values");
}

internal partial class ThermostatModeQueryBuilderV1 : GraphQlQueryBuilder<ThermostatModeQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "capabilities", IsComplex = true }
        };

    protected override string TypeName { get; } = "ThermostatMode";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatModeQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatModeQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public ThermostatModeQueryBuilderV1 ExceptName() => ExceptField("name");

    public ThermostatModeQueryBuilderV1 WithCapabilities(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("capabilities", alias, new GraphQlDirective[] { include, skip });

    public ThermostatModeQueryBuilderV1 ExceptCapabilities() => ExceptField("capabilities");
}

internal partial class SensorQueryBuilderV1 : GraphQlQueryBuilder<SensorQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "idDeprecated" },
            new FieldMetadata { Name = "hasHistory" },
            new FieldMetadata { Name = "measurement", IsComplex = true, QueryBuilderType = typeof(ThermostatMeasurementQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Sensor";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SensorQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public SensorQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public SensorQueryBuilderV1 ExceptId() => ExceptField("id");

    public SensorQueryBuilderV1 WithIdDeprecated(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("idDeprecated", alias, new GraphQlDirective[] { include, skip });

    public SensorQueryBuilderV1 ExceptIdDeprecated() => ExceptField("idDeprecated");

    public SensorQueryBuilderV1 WithHasHistory(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasHistory", alias, new GraphQlDirective[] { include, skip });

    public SensorQueryBuilderV1 ExceptHasHistory() => ExceptField("hasHistory");

    public SensorQueryBuilderV1 WithMeasurement(ThermostatMeasurementQueryBuilderV1 thermostatMeasurementQueryBuilder) => WithObjectField("measurement", thermostatMeasurementQueryBuilder);

    public SensorQueryBuilderV1 ExceptMeasurement() => ExceptField("measurement");
}

internal partial class SensorHistoryQueryBuilderV1 : GraphQlQueryBuilder<SensorHistoryQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "sensorId" },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "values", IsComplex = true, QueryBuilderType = typeof(SensorHistoryValueQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "SensorHistory";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SensorHistoryQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public SensorHistoryQueryBuilderV1 WithSensorId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("sensorId", alias, new GraphQlDirective[] { include, skip });

    public SensorHistoryQueryBuilderV1 ExceptSensorId() => ExceptField("sensorId");

    public SensorHistoryQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public SensorHistoryQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public SensorHistoryQueryBuilderV1 WithValues(SensorHistoryValueQueryBuilderV1 sensorHistoryValueQueryBuilder) => WithObjectField("values", sensorHistoryValueQueryBuilder);

    public SensorHistoryQueryBuilderV1 ExceptValues() => ExceptField("values");
}

internal partial class SensorHistoryValueQueryBuilderV1 : GraphQlQueryBuilder<SensorHistoryValueQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "value" },
            new FieldMetadata { Name = "valueText" }
        };

    protected override string TypeName { get; } = "SensorHistoryValue";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SensorHistoryValueQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public SensorHistoryValueQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public SensorHistoryValueQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public SensorHistoryValueQueryBuilderV1 WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("value", alias, new GraphQlDirective[] { include, skip });

    public SensorHistoryValueQueryBuilderV1 ExceptValue() => ExceptField("value");

    public SensorHistoryValueQueryBuilderV1 WithValueText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("valueText", alias, new GraphQlDirective[] { include, skip });

    public SensorHistoryValueQueryBuilderV1 ExceptValueText() => ExceptField("valueText");
}

internal partial class PairableDeviceQueryBuilderV1 : GraphQlQueryBuilder<PairableDeviceQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "oauth", IsComplex = true, QueryBuilderType = typeof(PairableDeviceOAuthQueryBuilderV1) },
            new FieldMetadata { Name = "readMoreUrl" }
        };

    protected override string TypeName { get; } = "PairableDevice";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PairableDeviceQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PairableDeviceQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public PairableDeviceQueryBuilderV1 ExceptType() => ExceptField("type");

    public PairableDeviceQueryBuilderV1 WithOauth(PairableDeviceOAuthQueryBuilderV1 pairableDeviceOAuthQueryBuilder) => WithObjectField("oauth", pairableDeviceOAuthQueryBuilder);

    public PairableDeviceQueryBuilderV1 ExceptOauth() => ExceptField("oauth");

    public PairableDeviceQueryBuilderV1 WithReadMoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("readMoreUrl", alias, new GraphQlDirective[] { include, skip });

    public PairableDeviceQueryBuilderV1 ExceptReadMoreUrl() => ExceptField("readMoreUrl");
}

internal partial class PairableDeviceOAuthQueryBuilderV1 : GraphQlQueryBuilder<PairableDeviceOAuthQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "url" },
            new FieldMetadata { Name = "redirectUriStartsWith" }
        };

    protected override string TypeName { get; } = "PairableDeviceOAuth";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PairableDeviceOAuthQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PairableDeviceOAuthQueryBuilderV1 WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("url", alias, new GraphQlDirective[] { include, skip });

    public PairableDeviceOAuthQueryBuilderV1 ExceptUrl() => ExceptField("url");

    public PairableDeviceOAuthQueryBuilderV1 WithRedirectUriStartsWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("redirectUriStartsWith", alias, new GraphQlDirective[] { include, skip });

    public PairableDeviceOAuthQueryBuilderV1 ExceptRedirectUriStartsWith() => ExceptField("redirectUriStartsWith");
}

internal partial class ProductionMonthQueryBuilderV1 : GraphQlQueryBuilder<ProductionMonthQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "kwh" },
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "costText" },
            new FieldMetadata { Name = "kwhText" },
            new FieldMetadata { Name = "description" }
        };

    protected override string TypeName { get; } = "ProductionMonth";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ProductionMonthQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ProductionMonthQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptYear() => ExceptField("year");

    public ProductionMonthQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public ProductionMonthQueryBuilderV1 WithKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwh", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptKwh() => ExceptField("kwh");

    public ProductionMonthQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public ProductionMonthQueryBuilderV1 WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptIsComplete() => ExceptField("isComplete");

    public ProductionMonthQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public ProductionMonthQueryBuilderV1 WithCostText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costText", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptCostText() => ExceptField("costText");

    public ProductionMonthQueryBuilderV1 WithKwhText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwhText", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptKwhText() => ExceptField("kwhText");

    public ProductionMonthQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public ProductionMonthQueryBuilderV1 ExceptDescription() => ExceptField("description");
}

internal partial class ProductionQueryBuilderV1 : GraphQlQueryBuilder<ProductionQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "annualValues", IsComplex = true, QueryBuilderType = typeof(ProductionValueQueryBuilderV1) },
            new FieldMetadata { Name = "monthlyValues", IsComplex = true, QueryBuilderType = typeof(ProductionValueQueryBuilderV1) },
            new FieldMetadata { Name = "weeklyValues", IsComplex = true, QueryBuilderType = typeof(ProductionValueQueryBuilderV1) },
            new FieldMetadata { Name = "dailyValues", IsComplex = true, QueryBuilderType = typeof(ProductionValueQueryBuilderV1) },
            new FieldMetadata { Name = "hourlyValues", IsComplex = true, QueryBuilderType = typeof(ProductionValueQueryBuilderV1) },
            new FieldMetadata { Name = "totalConsumption" },
            new FieldMetadata { Name = "energyCost" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "latestTransactionTimestamp" },
            new FieldMetadata { Name = "timeZone" }
        };

    protected override string TypeName { get; } = "Production";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ProductionQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ProductionQueryBuilderV1 WithAnnualValues(ProductionValueQueryBuilderV1 productionValueQueryBuilder) => WithObjectField("annualValues", productionValueQueryBuilder);

    public ProductionQueryBuilderV1 ExceptAnnualValues() => ExceptField("annualValues");

    public ProductionQueryBuilderV1 WithMonthlyValues(ProductionValueQueryBuilderV1 productionValueQueryBuilder) => WithObjectField("monthlyValues", productionValueQueryBuilder);

    public ProductionQueryBuilderV1 ExceptMonthlyValues() => ExceptField("monthlyValues");

    public ProductionQueryBuilderV1 WithWeeklyValues(ProductionValueQueryBuilderV1 productionValueQueryBuilder) => WithObjectField("weeklyValues", productionValueQueryBuilder);

    public ProductionQueryBuilderV1 ExceptWeeklyValues() => ExceptField("weeklyValues");

    public ProductionQueryBuilderV1 WithDailyValues(ProductionValueQueryBuilderV1 productionValueQueryBuilder) => WithObjectField("dailyValues", productionValueQueryBuilder);

    public ProductionQueryBuilderV1 ExceptDailyValues() => ExceptField("dailyValues");

    public ProductionQueryBuilderV1 WithHourlyValues(ProductionValueQueryBuilderV1 productionValueQueryBuilder) => WithObjectField("hourlyValues", productionValueQueryBuilder);

    public ProductionQueryBuilderV1 ExceptHourlyValues() => ExceptField("hourlyValues");

    public ProductionQueryBuilderV1 WithTotalConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalConsumption", alias, new GraphQlDirective[] { include, skip });

    public ProductionQueryBuilderV1 ExceptTotalConsumption() => ExceptField("totalConsumption");

    public ProductionQueryBuilderV1 WithEnergyCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("energyCost", alias, new GraphQlDirective[] { include, skip });

    public ProductionQueryBuilderV1 ExceptEnergyCost() => ExceptField("energyCost");

    public ProductionQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public ProductionQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public ProductionQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public ProductionQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public ProductionQueryBuilderV1 WithLatestTransactionTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("latestTransactionTimestamp", alias, new GraphQlDirective[] { include, skip });

    public ProductionQueryBuilderV1 ExceptLatestTransactionTimestamp() => ExceptField("latestTransactionTimestamp");

    public ProductionQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public ProductionQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");
}

internal partial class ProductionValueQueryBuilderV1 : GraphQlQueryBuilder<ProductionValueQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "from" },
            new FieldMetadata { Name = "to" },
            new FieldMetadata { Name = "unitPrice" },
            new FieldMetadata { Name = "unitPriceVAT" },
            new FieldMetadata { Name = "consumption" },
            new FieldMetadata { Name = "consumptionUnit" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "unitCost" },
            new FieldMetadata { Name = "quality" },
            new FieldMetadata { Name = "consumptionEntries" }
        };

    protected override string TypeName { get; } = "ProductionValue";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ProductionValueQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ProductionValueQueryBuilderV1 WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("from", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptFrom() => ExceptField("from");

    public ProductionValueQueryBuilderV1 WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("to", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptTo() => ExceptField("to");

    public ProductionValueQueryBuilderV1 WithUnitPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitPrice", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptUnitPrice() => ExceptField("unitPrice");

    public ProductionValueQueryBuilderV1 WithUnitPriceVat(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitPriceVAT", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptUnitPriceVat() => ExceptField("unitPriceVAT");

    public ProductionValueQueryBuilderV1 WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");

    public ProductionValueQueryBuilderV1 WithConsumptionUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionUnit", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptConsumptionUnit() => ExceptField("consumptionUnit");

    public ProductionValueQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public ProductionValueQueryBuilderV1 WithUnitCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitCost", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptUnitCost() => ExceptField("unitCost");

    public ProductionValueQueryBuilderV1 WithQuality(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("quality", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptQuality() => ExceptField("quality");

    public ProductionValueQueryBuilderV1 WithConsumptionEntries(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionEntries", alias, new GraphQlDirective[] { include, skip });

    public ProductionValueQueryBuilderV1 ExceptConsumptionEntries() => ExceptField("consumptionEntries");
}

internal partial class FeedQueryBuilderV1 : GraphQlQueryBuilder<FeedQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "numberOfItems" },
            new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(FeedItemQueryBuilderV1) },
            new FieldMetadata { Name = "pushNotifications", IsComplex = true, QueryBuilderType = typeof(PushNotificationQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "Feed";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public FeedQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public FeedQueryBuilderV1 WithNumberOfItems(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("numberOfItems", alias, new GraphQlDirective[] { include, skip });

    public FeedQueryBuilderV1 ExceptNumberOfItems() => ExceptField("numberOfItems");

    public FeedQueryBuilderV1 WithItems(FeedItemQueryBuilderV1 feedItemQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> pageSize = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (page != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

        if (pageSize != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pageSize", ArgumentValue = pageSize} );

        return WithObjectField("items", feedItemQueryBuilder, args);
    }

    public FeedQueryBuilderV1 ExceptItems()
    {
        return ExceptField("items");
    }

    public FeedQueryBuilderV1 WithPushNotifications(PushNotificationQueryBuilderV1 pushNotificationQueryBuilder) => WithObjectField("pushNotifications", pushNotificationQueryBuilder);

    public FeedQueryBuilderV1 ExceptPushNotifications() => ExceptField("pushNotifications");
}

internal partial class FeedItemQueryBuilderV1 : GraphQlQueryBuilder<FeedItemQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "messageTypeId" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "text" },
            new FieldMetadata { Name = "createdAt" },
            new FieldMetadata { Name = "modifiedAt" }
        };

    protected override string TypeName { get; } = "FeedItem";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public FeedItemQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public FeedItemQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public FeedItemQueryBuilderV1 ExceptId() => ExceptField("id");

    public FeedItemQueryBuilderV1 WithMessageTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("messageTypeId", alias, new GraphQlDirective[] { include, skip });

    public FeedItemQueryBuilderV1 ExceptMessageTypeId() => ExceptField("messageTypeId");

    public FeedItemQueryBuilderV1 WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("link", alias, new GraphQlDirective[] { include, skip });

    public FeedItemQueryBuilderV1 ExceptLink() => ExceptField("link");

    public FeedItemQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public FeedItemQueryBuilderV1 ExceptText() => ExceptField("text");

    public FeedItemQueryBuilderV1 WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });

    public FeedItemQueryBuilderV1 ExceptCreatedAt() => ExceptField("createdAt");

    public FeedItemQueryBuilderV1 WithModifiedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("modifiedAt", alias, new GraphQlDirective[] { include, skip });

    public FeedItemQueryBuilderV1 ExceptModifiedAt() => ExceptField("modifiedAt");
}

internal partial class PushNotificationQueryBuilderV1 : GraphQlQueryBuilder<PushNotificationQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "text" }
        };

    protected override string TypeName { get; } = "PushNotification";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PushNotificationQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PushNotificationQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public PushNotificationQueryBuilderV1 ExceptId() => ExceptField("id");

    public PushNotificationQueryBuilderV1 WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("link", alias, new GraphQlDirective[] { include, skip });

    public PushNotificationQueryBuilderV1 ExceptLink() => ExceptField("link");

    public PushNotificationQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public PushNotificationQueryBuilderV1 ExceptText() => ExceptField("text");
}

internal partial class WalletQueryBuilderV1 : GraphQlQueryBuilder<WalletQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "paymentMethods", IsComplex = true, QueryBuilderType = typeof(PaymentMethodQueryBuilderV1) },
            new FieldMetadata { Name = "directDebitToPromote" }
        };

    protected override string TypeName { get; } = "Wallet";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public WalletQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public WalletQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public WalletQueryBuilderV1 ExceptId() => ExceptField("id");

    public WalletQueryBuilderV1 WithPaymentMethods(PaymentMethodQueryBuilderV1 paymentMethodQueryBuilder) => WithObjectField("paymentMethods", paymentMethodQueryBuilder);

    public WalletQueryBuilderV1 ExceptPaymentMethods() => ExceptField("paymentMethods");

    public WalletQueryBuilderV1 WithDirectDebitToPromote(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("directDebitToPromote", alias, new GraphQlDirective[] { include, skip });

    public WalletQueryBuilderV1 ExceptDirectDebitToPromote() => ExceptField("directDebitToPromote");
}

internal partial class PaymentMethodQueryBuilderV1 : GraphQlQueryBuilder<PaymentMethodQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "method" },
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "properties", IsComplex = true }
        };

    protected override string TypeName { get; } = "PaymentMethod";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PaymentMethodQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PaymentMethodQueryBuilderV1 WithMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("method", alias, new GraphQlDirective[] { include, skip });

    public PaymentMethodQueryBuilderV1 ExceptMethod() => ExceptField("method");

    public PaymentMethodQueryBuilderV1 WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("status", alias, new GraphQlDirective[] { include, skip });

    public PaymentMethodQueryBuilderV1 ExceptStatus() => ExceptField("status");

    public PaymentMethodQueryBuilderV1 WithProperties(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("properties", alias, new GraphQlDirective[] { include, skip });

    public PaymentMethodQueryBuilderV1 ExceptProperties() => ExceptField("properties");
}

internal partial class AboutQueryBuilderV1 : GraphQlQueryBuilder<AboutQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(AboutItemQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "About";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AboutQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AboutQueryBuilderV1 WithItems(AboutItemQueryBuilderV1 aboutItemQueryBuilder) => WithObjectField("items", aboutItemQueryBuilder);

    public AboutQueryBuilderV1 ExceptItems() => ExceptField("items");
}

internal partial class AboutItemQueryBuilderV1 : GraphQlQueryBuilder<AboutItemQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "label" },
            new FieldMetadata { Name = "url" }
        };

    protected override string TypeName { get; } = "AboutItem";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AboutItemQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public AboutItemQueryBuilderV1 WithLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("label", alias, new GraphQlDirective[] { include, skip });

    public AboutItemQueryBuilderV1 ExceptLabel() => ExceptField("label");

    public AboutItemQueryBuilderV1 WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("url", alias, new GraphQlDirective[] { include, skip });

    public AboutItemQueryBuilderV1 ExceptUrl() => ExceptField("url");
}

internal partial class MutationQueryBuilderV1 : GraphQlQueryBuilder<MutationQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(MeMutationQueryBuilderV1) }
        };

    protected override string Prefix { get; } = "mutation";

    protected override string TypeName { get; } = "Mutation";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public MutationQueryBuilderV1(string alias = null) : base(alias, null)
    {
    }

    public MutationQueryBuilderV1 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public MutationQueryBuilderV1 WithMe(MeMutationQueryBuilderV1 meMutationQueryBuilder) => WithObjectField("me", meMutationQueryBuilder);

    public MutationQueryBuilderV1 ExceptMe() => ExceptField("me");
}

internal partial class MeMutationQueryBuilderV1 : GraphQlQueryBuilder<MeMutationQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "update", IsComplex = true, QueryBuilderType = typeof(MeQueryBuilderV1) },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeMutationQueryBuilderV1) },
            new FieldMetadata { Name = "updateAppState", IsComplex = true, QueryBuilderType = typeof(GQLMutationGeneralResponseQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "MeMutation";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public MeMutationQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public MeMutationQueryBuilderV1 WithUpdate(MeQueryBuilderV1 meQueryBuilder, QueryBuilderParameter<string> email = null, QueryBuilderParameter<string> mobile = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (email != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "email", ArgumentValue = email} );

        if (mobile != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mobile", ArgumentValue = mobile} );

        return WithObjectField("update", meQueryBuilder, args);
    }

    public MeMutationQueryBuilderV1 ExceptUpdate()
    {
        return ExceptField("update");
    }

    public MeMutationQueryBuilderV1 WithHome(HomeMutationQueryBuilderV1 homeMutationQueryBuilder, QueryBuilderParameter<string> id = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (id != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

        return WithObjectField("home", homeMutationQueryBuilder, args);
    }

    public MeMutationQueryBuilderV1 ExceptHome()
    {
        return ExceptField("home");
    }

    public MeMutationQueryBuilderV1 WithUpdateAppState(GQLMutationGeneralResponseQueryBuilderV1 gQLMutationGeneralResponseQueryBuilder, QueryBuilderParameter<AppStateMutationV1> state = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (state != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "state", ArgumentValue = state} );

        return WithObjectField("updateAppState", gQLMutationGeneralResponseQueryBuilder, args);
    }

    public MeMutationQueryBuilderV1 ExceptUpdateAppState()
    {
        return ExceptField("updateAppState");
    }
}

internal partial class HomeMutationQueryBuilderV1 : GraphQlQueryBuilder<HomeMutationQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "thermostat", IsComplex = true, QueryBuilderType = typeof(ThermostatMutationQueryBuilderV1) },
            new FieldMetadata { Name = "pairDeviceWithOAuth", IsComplex = true, QueryBuilderType = typeof(PairDeviceResultQueryBuilderV1) },
            new FieldMetadata { Name = "pairDeviceWithCredentials", IsComplex = true, QueryBuilderType = typeof(PairDeviceResultQueryBuilderV1) },
            new FieldMetadata { Name = "answerProfileQuestions", IsComplex = true, QueryBuilderType = typeof(HomeProfileQuestionQueryBuilderV1) },
            new FieldMetadata { Name = "sendMeterReading", IsComplex = true, QueryBuilderType = typeof(GQLMutationGeneralResponseQueryBuilderV1) },
            new FieldMetadata { Name = "setMeteringPointIdAndBindingTime", IsComplex = true, QueryBuilderType = typeof(GQLMutationGeneralResponseQueryBuilderV1) },
            new FieldMetadata { Name = "restartSubscription", IsComplex = true, QueryBuilderType = typeof(GQLMutationGeneralResponseQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "HomeMutation";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public HomeMutationQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public HomeMutationQueryBuilderV1 WithThermostat(ThermostatMutationQueryBuilderV1 thermostatMutationQueryBuilder, QueryBuilderParameter<string> id = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (id != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

        return WithObjectField("thermostat", thermostatMutationQueryBuilder, args);
    }

    public HomeMutationQueryBuilderV1 ExceptThermostat()
    {
        return ExceptField("thermostat");
    }

    public HomeMutationQueryBuilderV1 WithPairDeviceWithOAuth(PairDeviceResultQueryBuilderV1 pairDeviceResultQueryBuilder, QueryBuilderParameter<string> deviceType = null, QueryBuilderParameter<string> authorizationCode = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (deviceType != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "deviceType", ArgumentValue = deviceType} );

        if (authorizationCode != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "authorizationCode", ArgumentValue = authorizationCode} );

        return WithObjectField("pairDeviceWithOAuth", pairDeviceResultQueryBuilder, args);
    }

    public HomeMutationQueryBuilderV1 ExceptPairDeviceWithOAuth()
    {
        return ExceptField("pairDeviceWithOAuth");
    }

    public HomeMutationQueryBuilderV1 WithPairDeviceWithCredentials(PairDeviceResultQueryBuilderV1 pairDeviceResultQueryBuilder, QueryBuilderParameter<string> deviceType = null, QueryBuilderParameter<string> username = null, QueryBuilderParameter<string> password = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (deviceType != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "deviceType", ArgumentValue = deviceType} );

        if (username != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "username", ArgumentValue = username} );

        if (password != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "password", ArgumentValue = password} );

        return WithObjectField("pairDeviceWithCredentials", pairDeviceResultQueryBuilder, args);
    }

    public HomeMutationQueryBuilderV1 ExceptPairDeviceWithCredentials()
    {
        return ExceptField("pairDeviceWithCredentials");
    }

    public HomeMutationQueryBuilderV1 WithAnswerProfileQuestions(HomeProfileQuestionQueryBuilderV1 homeProfileQuestionQueryBuilder, QueryBuilderParameter<IEnumerable<HomeProfileQuestionAnswerV1>> answers = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (answers != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "answers", ArgumentValue = answers} );

        return WithObjectField("answerProfileQuestions", homeProfileQuestionQueryBuilder, args);
    }

    public HomeMutationQueryBuilderV1 ExceptAnswerProfileQuestions()
    {
        return ExceptField("answerProfileQuestions");
    }

    public HomeMutationQueryBuilderV1 WithSendMeterReading(GQLMutationGeneralResponseQueryBuilderV1 gQLMutationGeneralResponseQueryBuilder, QueryBuilderParameter<int?> meterReading = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (meterReading != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "meterReading", ArgumentValue = meterReading} );

        return WithObjectField("sendMeterReading", gQLMutationGeneralResponseQueryBuilder, args);
    }

    public HomeMutationQueryBuilderV1 ExceptSendMeterReading()
    {
        return ExceptField("sendMeterReading");
    }

    public HomeMutationQueryBuilderV1 WithSetMeteringPointIdAndBindingTime(GQLMutationGeneralResponseQueryBuilderV1 gQLMutationGeneralResponseQueryBuilder, QueryBuilderParameter<string> meteringPointId = null, QueryBuilderParameter<string> bindingTime = null, QueryBuilderParameter<bool?> isMovingIn = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (meteringPointId != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "meteringPointId", ArgumentValue = meteringPointId} );

        if (bindingTime != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bindingTime", ArgumentValue = bindingTime} );

        if (isMovingIn != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isMovingIn", ArgumentValue = isMovingIn} );

        return WithObjectField("setMeteringPointIdAndBindingTime", gQLMutationGeneralResponseQueryBuilder, args);
    }

    public HomeMutationQueryBuilderV1 ExceptSetMeteringPointIdAndBindingTime()
    {
        return ExceptField("setMeteringPointIdAndBindingTime");
    }

    public HomeMutationQueryBuilderV1 WithRestartSubscription(GQLMutationGeneralResponseQueryBuilderV1 gQLMutationGeneralResponseQueryBuilder) => WithObjectField("restartSubscription", gQLMutationGeneralResponseQueryBuilder);

    public HomeMutationQueryBuilderV1 ExceptRestartSubscription() => ExceptField("restartSubscription");
}

internal partial class ThermostatMutationQueryBuilderV1 : GraphQlQueryBuilder<ThermostatMutationQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "setState" },
            new FieldMetadata { Name = "setName" }
        };

    protected override string TypeName { get; } = "ThermostatMutation";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ThermostatMutationQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public ThermostatMutationQueryBuilderV1 WithSetState(QueryBuilderParameter<string> mode = null, QueryBuilderParameter<decimal?> comfortTemperature = null, QueryBuilderParameter<string> fanLevel = null, QueryBuilderParameter<string> onOff = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (mode != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mode", ArgumentValue = mode} );

        if (comfortTemperature != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "comfortTemperature", ArgumentValue = comfortTemperature} );

        if (fanLevel != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "fanLevel", ArgumentValue = fanLevel} );

        if (onOff != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onOff", ArgumentValue = onOff} );

        return WithScalarField("setState", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public ThermostatMutationQueryBuilderV1 ExceptSetState()
    {
        return ExceptField("setState");
    }

    public ThermostatMutationQueryBuilderV1 WithSetName(QueryBuilderParameter<string> name = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (name != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );

        return WithScalarField("setName", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public ThermostatMutationQueryBuilderV1 ExceptSetName()
    {
        return ExceptField("setName");
    }
}

internal partial class PairDeviceResultQueryBuilderV1 : GraphQlQueryBuilder<PairDeviceResultQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "thermostats", IsComplex = true, QueryBuilderType = typeof(ThermostatQueryBuilderV1) },
            new FieldMetadata { Name = "sensors", IsComplex = true, QueryBuilderType = typeof(SensorQueryBuilderV1) },
            new FieldMetadata { Name = "error", IsComplex = true, QueryBuilderType = typeof(GQLMutationErrorQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "PairDeviceResult";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public PairDeviceResultQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public PairDeviceResultQueryBuilderV1 WithThermostats(ThermostatQueryBuilderV1 thermostatQueryBuilder) => WithObjectField("thermostats", thermostatQueryBuilder);

    public PairDeviceResultQueryBuilderV1 ExceptThermostats() => ExceptField("thermostats");

    public PairDeviceResultQueryBuilderV1 WithSensors(SensorQueryBuilderV1 sensorQueryBuilder) => WithObjectField("sensors", sensorQueryBuilder);

    public PairDeviceResultQueryBuilderV1 ExceptSensors() => ExceptField("sensors");

    public PairDeviceResultQueryBuilderV1 WithError(GQLMutationErrorQueryBuilderV1 gQLMutationErrorQueryBuilder) => WithObjectField("error", gQLMutationErrorQueryBuilder);

    public PairDeviceResultQueryBuilderV1 ExceptError() => ExceptField("error");
}

internal partial class GQLMutationErrorQueryBuilderV1 : GraphQlQueryBuilder<GQLMutationErrorQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "statusCode" },
            new FieldMetadata { Name = "message" }
        };

    protected override string TypeName { get; } = "GQLMutationError";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public GQLMutationErrorQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public GQLMutationErrorQueryBuilderV1 WithStatusCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("statusCode", alias, new GraphQlDirective[] { include, skip });

    public GQLMutationErrorQueryBuilderV1 ExceptStatusCode() => ExceptField("statusCode");

    public GQLMutationErrorQueryBuilderV1 WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("message", alias, new GraphQlDirective[] { include, skip });

    public GQLMutationErrorQueryBuilderV1 ExceptMessage() => ExceptField("message");
}

internal partial class GQLMutationGeneralResponseQueryBuilderV1 : GraphQlQueryBuilder<GQLMutationGeneralResponseQueryBuilderV1>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "error", IsComplex = true, QueryBuilderType = typeof(GQLMutationErrorQueryBuilderV1) }
        };

    protected override string TypeName { get; } = "GQLMutationGeneralResponse";

    protected override IList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

    public GQLMutationGeneralResponseQueryBuilderV1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) : base(alias, new GraphQlDirective[] { include, skip })
    {
    }

    public GQLMutationGeneralResponseQueryBuilderV1 WithError(GQLMutationErrorQueryBuilderV1 gQLMutationErrorQueryBuilder) => WithObjectField("error", gQLMutationErrorQueryBuilder);

    public GQLMutationGeneralResponseQueryBuilderV1 ExceptError() => ExceptField("error");
}
#endregion

#region input classes
internal partial class HomeProfileQuestionAnswerV1 : IGraphQlInputObject
{
    private InputPropertyInfo _propertyName;
    private InputPropertyInfo _value;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> PropertyName
    {
        get => (QueryBuilderParameter<string>)_propertyName.Value;
        set => _propertyName = new InputPropertyInfo { Name = "propertyName", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
    #endif
    public QueryBuilderParameter<object> Value
    {
        get => (QueryBuilderParameter<object>)_value.Value;
        set => _value = new InputPropertyInfo { Name = "value", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_propertyName.Name != null) yield return _propertyName;
        if (_value.Name != null) yield return _value;
    }
}

internal partial class AppStateMutationV1 : IGraphQlInputObject
{
    private InputPropertyInfo _journey;
    private InputPropertyInfo _frontScreens;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<AppStateJourneyMutationV1>))]
    #endif
    public QueryBuilderParameter<AppStateJourneyMutationV1> Journey
    {
        get => (QueryBuilderParameter<AppStateJourneyMutationV1>)_journey.Value;
        set => _journey = new InputPropertyInfo { Name = "journey", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AppStateFronScreenMutationV1>>))]
    #endif
    public QueryBuilderParameter<ICollection<AppStateFronScreenMutationV1>> FrontScreens
    {
        get => (QueryBuilderParameter<ICollection<AppStateFronScreenMutationV1>>)_frontScreens.Value;
        set => _frontScreens = new InputPropertyInfo { Name = "frontScreens", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_journey.Name != null) yield return _journey;
        if (_frontScreens.Name != null) yield return _frontScreens;
    }
}

internal partial class AppStateJourneyMutationV1 : IGraphQlInputObject
{
    private InputPropertyInfo _hasVisitedPairDevices;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
    #endif
    public QueryBuilderParameter<bool?> HasVisitedPairDevices
    {
        get => (QueryBuilderParameter<bool?>)_hasVisitedPairDevices.Value;
        set => _hasVisitedPairDevices = new InputPropertyInfo { Name = "hasVisitedPairDevices", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_hasVisitedPairDevices.Name != null) yield return _hasVisitedPairDevices;
    }
}

internal partial class AppStateFronScreenMutationV1 : IGraphQlInputObject
{
    private InputPropertyInfo _homeId;
    private InputPropertyInfo _bubbles;
    private InputPropertyInfo _bubblesSortOrder;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> HomeId
    {
        get => (QueryBuilderParameter<string>)_homeId.Value;
        set => _homeId = new InputPropertyInfo { Name = "homeId", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
    #endif
    public QueryBuilderParameter<ICollection<string>> Bubbles
    {
        get => (QueryBuilderParameter<ICollection<string>>)_bubbles.Value;
        set => _bubbles = new InputPropertyInfo { Name = "bubbles", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
    #endif
    public QueryBuilderParameter<ICollection<string>> BubblesSortOrder
    {
        get => (QueryBuilderParameter<ICollection<string>>)_bubblesSortOrder.Value;
        set => _bubblesSortOrder = new InputPropertyInfo { Name = "bubblesSortOrder", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_homeId.Name != null) yield return _homeId;
        if (_bubbles.Name != null) yield return _bubbles;
        if (_bubblesSortOrder.Name != null) yield return _bubblesSortOrder;
    }
}
#endregion

#region data classes
internal partial class QueryV1
{
    public MeV1 Me { get; set; }
}

internal partial class MeV1
{
    public Guid? Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string FullName { get; set; }
    public string Ssn { get; set; }
    public string Email { get; set; }
    public string Language { get; set; }
    public string Tone { get; set; }
    public string Mobile { get; set; }
    public GreetingV1 WelcomeGreeting { get; set; }
    public AppStateV1 AppState { get; set; }
    public HomeV1 Home { get; set; }
    public ICollection<HomeV1> Homes { get; set; }
    public FeedV1 Feed { get; set; }
    public WalletV1 Wallet { get; set; }
    public AboutV1 About { get; set; }
}

internal partial class GreetingV1
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string DescriptionWhenNoEnergyDeal { get; set; }
    public string ShowUntil { get; set; }
}

internal partial class AppStateV1
{
    public AppStateJourneyV1 Journey { get; set; }
    public ICollection<AppStateFronScreenV1> FrontScreens { get; set; }
}

internal partial class AppStateJourneyV1
{
    public bool? HasVisitedPairDevices { get; set; }
}

internal partial class AppStateFronScreenV1
{
    public string HomeId { get; set; }
    public ICollection<string> Bubbles { get; set; }
    public ICollection<string> BubblesSortOrder { get; set; }
}

internal partial class HomeV1
{
    public Guid? Id { get; set; }
    public Avatar? Avatar { get; set; }
    public string TimeZone { get; set; }
    public string Title { get; set; }
    public string Type { get; set; }
    public bool? HasEnergyDeal { get; set; }
    public AddressV1 Address { get; set; }
    public SubscriptionV1 Subscription { get; set; }
    public ICollection<ConsumptionMonthV1> ConsumptionMonths { get; set; }
    public ConsumptionV1 Consumption { get; set; }
    public PreLiveComparisonV1 PreLiveComparison { get; set; }
    public ICollection<ComparisonV1> Comparisons { get; set; }
    public ComparisonV1 ComparisonCurrentMonth { get; set; }
    public ICollection<HomeProfileQuestionV1> ProfileQuestions { get; set; }
    public ICollection<object> Temperatures { get; set; }
    public SignupStatusV1 SignupStatus { get; set; }
    public ICollection<DisaggregationV1> Disaggregation { get; set; }
    public WeatherV1 Weather { get; set; }
    public AwayModeV1 AwayMode { get; set; }
    public DayNightScheduleV1 DayNightSchedule { get; set; }
    public ReportRootV1 Report { get; set; }
    public ICollection<ThermostatV1> Thermostats { get; set; }
    public ICollection<SensorV1> Sensors { get; set; }
    public ICollection<SensorHistoryV1> SensorsHistory { get; set; }
    public ICollection<PairableDeviceV1> PairableDevices { get; set; }
    public ICollection<ProductionMonthV1> ProductionMonths { get; set; }
    public ProductionV1 Production { get; set; }
}

internal partial class AddressV1
{
    public string Address1 { get; set; }
    public string Address2 { get; set; }
    public string Address3 { get; set; }
    public string City { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public decimal? Latitude { get; set; }
    public decimal? Longitude { get; set; }
    public int? Elevation { get; set; }
    public string AddressText { get; set; }
}

internal partial class SubscriptionV1
{
    public Guid? Id { get; set; }
    public Guid? WalletId { get; set; }
    public DateTimeOffset? ValidFrom { get; set; }
    public DateTimeOffset? ValidTo { get; set; }
    public string Status { get; set; }
    public int? BillingRegionId { get; set; }
    public PriceRatingRootV1 PriceRating { get; set; }
    public ICollection<InvoiceV1> Invoices { get; set; }
    public EnergyDealV1 EnergyDeal { get; set; }
}

internal partial class PriceRatingRootV1
{
    public bool? IsAvailable { get; set; }
    public bool? UseTotalIsConfigurable { get; set; }
    public bool? UseTotalAsDefault { get; set; }
    public string UseTotalText { get; set; }
    public PriceRatingV1 Hourly { get; set; }
    public PriceRatingV1 Daily { get; set; }
    public PriceRatingV1 Monthly { get; set; }
}

internal partial class PriceRatingV1
{
    public decimal? MinEnergy { get; set; }
    public decimal? MaxEnergy { get; set; }
    public decimal? MinTotal { get; set; }
    public decimal? MaxTotal { get; set; }
    public string Currency { get; set; }
    public PriceRatingColorOffsetV1 ColorOffsets { get; set; }
    public ICollection<PriceRatingEntryV1> Entries { get; set; }
}

internal partial class PriceRatingColorOffsetV1
{
    public decimal? FullGreenPercent { get; set; }
    public decimal? FullYellowPercent { get; set; }
    public decimal? FullRedPercent { get; set; }
}

internal partial class PriceRatingEntryV1
{
    public string Time { get; set; }
    public decimal? Energy { get; set; }
    public decimal? Total { get; set; }
    public decimal? Difference { get; set; }
}

internal partial class InvoiceV1
{
    public int? Id { get; set; }
    public string No { get; set; }
    public string Date { get; set; }
    public string DueDate { get; set; }
    public decimal? TotalCost { get; set; }
    public string TotalCostLocalized { get; set; }
    public decimal? TotalEnergyConsumption { get; set; }
    public string TotalEnergyConsumptionLocalized { get; set; }
    public decimal? TotalVat { get; set; }
    public string TotalVatLocalized { get; set; }
    public decimal? VatPercent { get; set; }
    public string VatPercentLocalized { get; set; }
    public bool? VatIsIncluded { get; set; }
    public string MeteringPointId { get; set; }
    public string PaymentReference { get; set; }
    public bool? ShowManualPaymentReferences { get; set; }
    public string BankAccount { get; set; }
    public string PdfUrl { get; set; }
    public string TimeZone { get; set; }
    public string Currency { get; set; }
    public InvoicePaymentV1 Payment { get; set; }
    public ICollection<InvoiceSectionV1> Sections { get; set; }
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
}

internal partial class InvoicePaymentV1
{
    public string Status { get; set; }
    public string Method { get; set; }
    public string Date { get; set; }
    public string FailureText { get; set; }
    public CreditCardV1 CreditCard { get; set; }
}

internal partial class CreditCardV1
{
    public string Brand { get; set; }
    public string Last4 { get; set; }
}

internal partial class InvoiceSectionV1
{
    public string Type { get; set; }
    public string Text { get; set; }
    public string SubText { get; set; }
    public decimal? Consumption { get; set; }
    public string ConsumptionLocalized { get; set; }
    public string ConsumptionUnit { get; set; }
    public decimal? Price { get; set; }
    public string PriceLocalized { get; set; }
    public string PriceUnit { get; set; }
    public decimal? Cost { get; set; }
    public string CostLocalized { get; set; }
    public string CostUnit { get; set; }
}

internal partial class EnergyDealV1
{
    public ProducerV1 CurrentProducer { get; set; }
}

internal partial class ProducerV1
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string ImageSrc { get; set; }
    public ICollection<ProducerBulletV1> Bullets { get; set; }
}

internal partial class ProducerBulletV1
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string ReadMoreUrl { get; set; }
}

internal partial class ConsumptionMonthV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? Kwh { get; set; }
    public decimal? Cost { get; set; }
    public bool? IsComplete { get; set; }
    public decimal? KwhEstimate { get; set; }
    public decimal? CostEstimate { get; set; }
    public string Currency { get; set; }
}

internal partial class ConsumptionV1
{
    public object AnnualValues { get; set; }
    public object MonthlyValues { get; set; }
    public object WeeklyValues { get; set; }
    public object DailyValues { get; set; }
    public object HourlyValues { get; set; }
    public decimal? TotalConsumption { get; set; }
    public decimal? EnergyCost { get; set; }
    public decimal? TotalCost { get; set; }
    public string Currency { get; set; }
    public DateTimeOffset? LatestTransactionTimestamp { get; set; }
    public string TimeZone { get; set; }
}

internal partial class PreLiveComparisonV1
{
    public string HomeId { get; set; }
    public bool? BasedOnActuals { get; set; }
    public ComparisonV1 PreviousYear { get; set; }
    public ICollection<ComparisonV1> PreviousYearMonths { get; set; }
}

internal partial class ComparisonV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public string Resolution { get; set; }
    public string HomeEfficency { get; set; }
    public string HomeEfficencyDescription { get; set; }
    public ComparisonDataV1 Home { get; set; }
    public ComparisonDataV1 Average { get; set; }
    public ComparisonDataV1 Efficient { get; set; }
}

internal partial class ComparisonDataV1
{
    public decimal? Cost { get; set; }
    public decimal? Consumption { get; set; }
}

internal partial class HomeProfileQuestionV1
{
    public int? Id { get; set; }
    public string Title { get; set; }
    public string Text { get; set; }
    public string Category { get; set; }
    public bool? IsAnswered { get; set; }
    public string PropertyName { get; set; }
    public string ValueType { get; set; }
    public object CurrentValue { get; set; }
    public string CurrentValueText { get; set; }
    public HomeProfileQuestionInputV1 Input { get; set; }
}

internal partial class HomeProfileQuestionInputV1
{
    public string Type { get; set; }
    public object Options { get; set; }
}

internal partial class SignupStatusV1
{
    public ProcessStepV1 FeedStep { get; set; }
    public ProcessStepV1 AvatarStep { get; set; }
    public ICollection<ProcessStepV1> Steps { get; set; }
}

internal partial class ProcessStepV1
{
    public DateTimeOffset? Timestamp { get; set; }
    public bool? IsComplete { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
}

internal partial class DisaggregationV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? FixedConsumptionKwh { get; set; }
    public int? FixedConsumptionKwhPercent { get; set; }
    public decimal? FixedConsumptionCost { get; set; }
    public decimal? HeatingConsumptionKwh { get; set; }
    public int? HeatingConsumptionKwhPercent { get; set; }
    public decimal? HeatingConsumptionCost { get; set; }
    public decimal? BehaviorConsumptionKwh { get; set; }
    public int? BehaviorConsumptionKwhPercent { get; set; }
    public decimal? BehaviorConsumptionCost { get; set; }
    public string Currency { get; set; }
    public bool? IsValid { get; set; }
    public int? TotalCost { get; set; }
    public int? TotalConsumptionKwh { get; set; }
}

internal partial class WeatherV1
{
    public decimal? MinTemperature { get; set; }
    public decimal? MaxTemperature { get; set; }
    public ICollection<WeatherEntryV1> Entries { get; set; }
}

internal partial class WeatherEntryV1
{
    public string Time { get; set; }
    public decimal? Temperature { get; set; }
    public string Type { get; set; }
    public decimal? Fog { get; set; }
    public decimal? Precipitation { get; set; }
    public decimal? Cloudiness { get; set; }
    public decimal? WindSpeed { get; set; }
    public decimal? WindGust { get; set; }
}

internal partial class AwayModeV1
{
    public bool? IsSupported { get; set; }
    public AwayModeSettingsV1 Settings { get; set; }
}

internal partial class AwayModeSettingsV1
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
}

internal partial class DayNightScheduleV1
{
    public bool? IsSupported { get; set; }
    public DayNightScheduleSettingsV1 Day { get; set; }
    public DayNightScheduleSettingsV1 Night { get; set; }
}

internal partial class DayNightScheduleSettingsV1
{
    public bool? IsEnabled { get; set; }
    public string LocalTimeFrom { get; set; }
    public string LocalTimeTo { get; set; }
    public ICollection<int> RecurringDays { get; set; }
}

internal partial class ReportRootV1
{
    public ICollection<ReportV1> Reports { get; set; }
}

internal partial class ReportV1
{
    public string Avatar { get; set; }
    public string Title { get; set; }
    public string Efficiency { get; set; }
    public int? Year { get; set; }
    public int? Month { get; set; }
    public ICollection<ReportCellV1> Items { get; set; }
}

internal partial class ReportCellV1
{
    public string Type { get; set; }
    public string Style { get; set; }
    public string ImageSrc { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string UnitText { get; set; }
    public string Link { get; set; }
    public object Properties { get; set; }
}

internal partial class ThermostatV1
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Connectivity { get; set; }
    public ThermostatStateV1 State { get; set; }
    public ThermostatMeasurementsV1 Measurements { get; set; }
    public ICollection<ThermostatCapabilityV1> Capabilities { get; set; }
    public ICollection<ThermostatModeV1> Modes { get; set; }
    public string Template { get; set; }
    public bool? HasSettings { get; set; }
    public bool? SupportsDayNightSchedule { get; set; }
}

internal partial class ThermostatStateV1
{
    public string Mode { get; set; }
    public decimal? ComfortTemperature { get; set; }
    public string FanLevel { get; set; }
    public string OnOff { get; set; }
}

internal partial class ThermostatMeasurementsV1
{
    public decimal? Temperature { get; set; }
    public DateTimeOffset? Timestamp { get; set; }
    public ICollection<ThermostatMeasurementV1> Display { get; set; }
}

internal partial class ThermostatMeasurementV1
{
    public string Label { get; set; }
    public string Description { get; set; }
    public string DescriptionLong { get; set; }
    public decimal? Value { get; set; }
    public string ValueText { get; set; }
    public string Unit { get; set; }
    public string UnitText { get; set; }
    public DateTimeOffset? Timestamp { get; set; }
    public string Type { get; set; }
    public string TypeText { get; set; }
}

internal partial class ThermostatCapabilityV1
{
    public string Name { get; set; }
    public string Type { get; set; }
    public object Values { get; set; }
}

internal partial class ThermostatModeV1
{
    public string Name { get; set; }
    public ICollection<string> Capabilities { get; set; }
}

internal partial class SensorV1
{
    public string Id { get; set; }
    public string IdDeprecated { get; set; }
    public bool? HasHistory { get; set; }
    public ThermostatMeasurementV1 Measurement { get; set; }
}

internal partial class SensorHistoryV1
{
    public string SensorId { get; set; }
    public string Description { get; set; }
    public ICollection<SensorHistoryValueV1> Values { get; set; }
}

internal partial class SensorHistoryValueV1
{
    public DateTimeOffset? Timestamp { get; set; }
    public decimal? Value { get; set; }
    public string ValueText { get; set; }
}

internal partial class PairableDeviceV1
{
    public string Type { get; set; }
    public PairableDeviceOAuthV1 Oauth { get; set; }
    public string ReadMoreUrl { get; set; }
}

internal partial class PairableDeviceOAuthV1
{
    public string Url { get; set; }
    public string RedirectUriStartsWith { get; set; }
}

internal partial class ProductionMonthV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? Kwh { get; set; }
    public decimal? Cost { get; set; }
    public bool? IsComplete { get; set; }
    public string Title { get; set; }
    public string CostText { get; set; }
    public string KwhText { get; set; }
    public string Description { get; set; }
}

internal partial class ProductionV1
{
    public ICollection<ProductionValueV1> AnnualValues { get; set; }
    public ICollection<ProductionValueV1> MonthlyValues { get; set; }
    public ICollection<ProductionValueV1> WeeklyValues { get; set; }
    public ICollection<ProductionValueV1> DailyValues { get; set; }
    public ICollection<ProductionValueV1> HourlyValues { get; set; }
    public decimal? TotalConsumption { get; set; }
    public decimal? EnergyCost { get; set; }
    public decimal? TotalCost { get; set; }
    public string Currency { get; set; }
    public DateTimeOffset? LatestTransactionTimestamp { get; set; }
    public string TimeZone { get; set; }
}

internal partial class ProductionValueV1
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
    public decimal? UnitPrice { get; set; }
    public decimal? UnitPriceVat { get; set; }
    public decimal? Consumption { get; set; }
    public string ConsumptionUnit { get; set; }
    public decimal? TotalCost { get; set; }
    public decimal? UnitCost { get; set; }
    public string Quality { get; set; }
    public int? ConsumptionEntries { get; set; }
}

internal partial class FeedV1
{
    public int? NumberOfItems { get; set; }
    public ICollection<FeedItemV1> Items { get; set; }
    public ICollection<PushNotificationV1> PushNotifications { get; set; }
}

internal partial class FeedItemV1
{
    public int? Id { get; set; }
    public string MessageTypeId { get; set; }
    public string Link { get; set; }
    public string Text { get; set; }
    public DateTimeOffset? CreatedAt { get; set; }
    public DateTimeOffset? ModifiedAt { get; set; }
}

internal partial class PushNotificationV1
{
    public int? Id { get; set; }
    public string Link { get; set; }
    public string Text { get; set; }
}

internal partial class WalletV1
{
    public string Id { get; set; }
    public ICollection<PaymentMethodV1> PaymentMethods { get; set; }
    public string DirectDebitToPromote { get; set; }
}

internal partial class PaymentMethodV1
{
    public string Method { get; set; }
    public string Status { get; set; }
    public object Properties { get; set; }
}

internal partial class AboutV1
{
    public ICollection<AboutItemV1> Items { get; set; }
}

internal partial class AboutItemV1
{
    public string Label { get; set; }
    public string Url { get; set; }
}

internal partial class MutationV1
{
    public MeMutationV1 Me { get; set; }
}

internal partial class MeMutationV1
{
    public MeV1 Update { get; set; }
    public HomeMutationV1 Home { get; set; }
    public GQLMutationGeneralResponseV1 UpdateAppState { get; set; }
}

internal partial class HomeMutationV1
{
    public ThermostatMutationV1 Thermostat { get; set; }
    public PairDeviceResultV1 PairDeviceWithOAuth { get; set; }
    public PairDeviceResultV1 PairDeviceWithCredentials { get; set; }
    public ICollection<HomeProfileQuestionV1> AnswerProfileQuestions { get; set; }
    public GQLMutationGeneralResponseV1 SendMeterReading { get; set; }
    public GQLMutationGeneralResponseV1 SetMeteringPointIdAndBindingTime { get; set; }
    public GQLMutationGeneralResponseV1 RestartSubscription { get; set; }
}

internal partial class ThermostatMutationV1
{
    public bool? SetState { get; set; }
    public bool? SetName { get; set; }
}

internal partial class PairDeviceResultV1
{
    public ICollection<ThermostatV1> Thermostats { get; set; }
    public ICollection<SensorV1> Sensors { get; set; }
    public GQLMutationErrorV1 Error { get; set; }
}

internal partial class GQLMutationErrorV1
{
    public int? StatusCode { get; set; }
    public string Message { get; set; }
}

internal partial class GQLMutationGeneralResponseV1
{
    public GQLMutationErrorV1 Error { get; set; }
}
#endregion
